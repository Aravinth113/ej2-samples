{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\">\n        <div class=\"sliderwrap\">\n            <label class=\"userselect\">MinRange Slider With Limits</label>\n            <div id=\"minrange\"></div>\n        </div>\n        <div class=\"sliderwrap\">\n            <label class=\"userselect\">Range Slider With Limits</label>\n            <div id=\"range\"></div>\n        </div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section property-custom\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">MinStart</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"minStart\" type=\"text\">\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">MinEnd</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"minEnd\" type=\"text\">\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">MaxStart</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"maxStart\" type=\"text\">\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">MaxEnd</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"maxEnd\" type=\"text\">\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Lock First Handle</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"fixedOne\" type=\"checkbox\">\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Lock Second Handle</div>\n                </td>\n                <td style=\"width: 50%\">\n                    <input id=\"fixedSecond\" type=\"checkbox\">\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n\n\n<style>\n    .content-wrapper {\n        width: 52%;\n        margin: 0 auto;\n        min-width: 185px;\n    }\n\n    .sliderwrap {\n        margin-top: 45px;\n    }\n\n    .e-bigger .content-wrapper {\n        width: 80%;\n    }\n\n    .sliderwrap label {\n        padding-bottom: 50px;\n        font-size: 13px;\n        font-weight: 500;\n        margin-top: 15px;\n    }\n\n    .userselect {\n        -webkit-user-select: none;\n        /* Safari 3.1+ */\n        -moz-user-select: none;\n        /* Firefox 2+ */\n        -ms-user-select: none;\n        /* IE 10+ */\n        user-select: none;\n        /* Standard syntax */\n    }\n\n    .property-custom td {\n        padding: 5px;\n    }\n</style>\n</div></body></html>","index.ts":"{{ripple}}\r\nimport { Slider, NumericTextBox, ChangeEventArgs } from '@syncfusion/ej2-inputs';\r\nimport { CheckBox, ChangeEventArgs as CheckBoxChange } from '@syncfusion/ej2-buttons';\r\n\r\n/**\r\n * Limits sample\r\n */\r\n// tslint:disable-next-line:max-func-body-length\r\n\r\n    \r\n    // Initialize Slider Component\r\n    let minrangeObj: Slider = new Slider({\r\n        // Set slider minimum and maximum values\r\n        min: 0, max: 100,\r\n        // Set the value for slider\r\n        value: 25,\r\n        // Set the step value\r\n        step: 1,\r\n        // Initialize ticks with placement, largestep, smallstep\r\n        ticks: { placement: 'Before', largeStep: 20, smallStep: 5, showSmallTicks: true },\r\n        // Set the type for slider\r\n        type: 'MinRange',\r\n        // Set the limit values for the slider\r\n        limits: { enabled: true, minStart: 10, minEnd: 40 },\r\n        // Initialize tooltip with placement and showOn\r\n        tooltip: { isVisible: true, placement: 'Before', showOn: 'Focus' }\r\n    });\r\n    minrangeObj.appendTo('#minrange');\r\n\r\n    // Initialize Slider Component\r\n    let rangeObj: Slider = new Slider({\r\n        // Set slider minimum and maximum values\r\n        min: 0, max: 100,\r\n        // Set the intial range values for slider\r\n        value: [25, 75],\r\n        // Set the step value\r\n        step: 1,\r\n        // Set the type to render range slider\r\n        type: 'Range',\r\n        // Initialize ticks with placement, largestep, smallstep\r\n        ticks: { placement: 'Before', largeStep: 20, smallStep: 5, showSmallTicks: true },\r\n        // Set the limit values for the slider\r\n        limits: { enabled: true, minStart: 10, minEnd: 40, maxStart: 60, maxEnd: 90 },\r\n        // Initialize tooltip with placement and showOn\r\n        tooltip: { isVisible: true, placement: 'Before', showOn: 'Focus' }\r\n    });\r\n    rangeObj.appendTo('#range');\r\n\r\n    // Initialize NumericTextBox\r\n    let minStart: NumericTextBox = new NumericTextBox({\r\n        value: 10,\r\n        min: 0,\r\n        max: 100,\r\n        change: minStartChange\r\n    });\r\n    minStart.appendTo('#minStart');\r\n\r\n    let minEnd: NumericTextBox = new NumericTextBox({\r\n        value: 40,\r\n        min: 0,\r\n        max: 100,\r\n        change: minEndChange\r\n    });\r\n    minEnd.appendTo('#minEnd');\r\n\r\n    let maxStart: NumericTextBox = new NumericTextBox({\r\n        value: 60,\r\n        min: 0,\r\n        max: 100,\r\n        change: maxStartChange\r\n    });\r\n    maxStart.appendTo('#maxStart');\r\n\r\n    let maxEnd: NumericTextBox = new NumericTextBox({\r\n        value: 90,\r\n        min: 0,\r\n        max: 100,\r\n        change: maxEndChange\r\n    });\r\n    maxEnd.appendTo('#maxEnd');\r\n\r\n    // Initialize Checkbox\r\n    let fixedOne: CheckBox = new CheckBox({ change: fixOne });\r\n    fixedOne.appendTo('#fixedOne');\r\n\r\n    let fixedSecond: CheckBox = new CheckBox({ change: fixSecond });\r\n    fixedSecond.appendTo('#fixedSecond');\r\n\r\n    // Eventlisteners to lock first handle of the both sliders\r\n    function fixOne(args: CheckBoxChange): void {\r\n        minrangeObj.limits.startHandleFixed = args.checked;\r\n        rangeObj.limits.startHandleFixed = args.checked;\r\n    }\r\n\r\n    // Eventlisteners to lock second handle of the both sliders\r\n    function fixSecond(args: CheckBoxChange): void {\r\n        minrangeObj.limits.endHandleFixed = args.checked;\r\n        rangeObj.limits.endHandleFixed = args.checked;\r\n    }\r\n\r\n    // Eventlisteners to change limit values for both sliders\r\n    function minStartChange(args: ChangeEventArgs): void {\r\n        minrangeObj.limits.minStart = args.value;\r\n        rangeObj.limits.minStart = args.value;\r\n    }\r\n\r\n    function minEndChange(args: ChangeEventArgs): void {\r\n        minrangeObj.limits.minEnd = args.value;\r\n        rangeObj.limits.minEnd = args.value;\r\n    }\r\n\r\n    function maxStartChange(args: ChangeEventArgs): void {\r\n        minrangeObj.limits.maxStart = args.value;\r\n        rangeObj.limits.maxStart = args.value;\r\n    }\r\n\r\n    function maxEndChange(args: ChangeEventArgs): void {\r\n        minrangeObj.limits.maxEnd = args.value;\r\n        rangeObj.limits.maxEnd = args.value;\r\n    }\r\n\r\n    if (document.getElementById('right-pane')) {\r\n        document.getElementById('right-pane').addEventListener('scroll', onScroll);\r\n    }\r\n\r\n    // Handler used to reposition the tooltip on page scroll\r\n    function onScroll(): void {\r\n        let slider: Slider[] = [minrangeObj, rangeObj];\r\n        slider.forEach((slider: any) => {\r\n            slider.refreshTooltip(slider.tooltipTarget);\r\n        });\r\n    }\r\n\r\n"}