{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { TimePicker, ChangeEventArgs } from '@syncfusion/ej2-calendars';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\n\n/**\n * Time Range sample\n */\n\n\n    let value: Date;\n    let isStartTimeChange: Boolean = true;\n    let startTime: TimePicker = new TimePicker({\n        placeholder: 'Start Time',\n        change: onEnableEndTime\n    });\n    startTime.appendTo('#start');\n    let endTime: TimePicker = new TimePicker({\n        placeholder: 'End Time',\n        enabled: false\n    });\n    endTime.appendTo('#end');\n\n    let checkboxObject: CheckBox = new CheckBox({ label: 'Business Hours', change: changeTime });\n    checkboxObject.appendTo('#dayRange');\n\n    let endInput: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n\n    function changeTime(): void {\n        /*To determine whether we have selected business hours or not*/\n        let element: HTMLInputElement = <HTMLInputElement>document.getElementById('dayRange');\n        isStartTimeChange = false;\n        if (element.checked) {\n            /*Business hours*/\n            startTime.value = new Date('9/6/2017 9:00');\n            endTime.enabled = true;\n            endTime.value = new Date('9/6/2017 18:00');\n            startTime.readonly = true;\n            endTime.readonly = true;\n        } else {\n            endTime.value = null;\n            startTime.value = null;\n            endInput.value = '';\n            startTime.readonly = false;\n            endTime.readonly = false;\n            endTime.enabled = false;\n        }\n    }\n    function onEnableEndTime(args: ChangeEventArgs): void {\n        /*Enables end time if start time is selected*/\n        if (isStartTimeChange) {\n            endTime.enabled = true;\n            endTime.value = null;\n            endInput.value = '';\n            value = new Date(+args.value);\n            value.setMinutes(value.getMinutes() + endTime.step);\n            endTime.min = value;\n        } else {\n            isStartTimeChange = true;\n        }\n    }\n\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div class=\"control_wrapper\">\n        <div class=\"pane\">\n            <div class=\"tabs-wrap\">\n                <div class=\"wrap\">\n                    <input type=\"text\" id=\"start\">\n                </div>\n            </div>\n            <div class=\"tabs-wrap\" style=\"clear: both\">\n                <div class=\"wrap\">\n                    <input type=\"text\" id=\"end\">\n                </div>\n            </div>\n            <div class=\"tabs-wrap\" style=\"clear: both;padding: 14px 10px;\">\n                <div class=\"wrap\">\n                    <input type=\"checkbox\" id=\"dayRange\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<style>\n    .control_wrapper {\n        max-width: 500px;\n        margin: 0 auto;\n    }\n\n    .control_wrapper {\n        padding: 2%;\n        max-width: 400px;\n        border-style: solid;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n    }\n\n    .control-section {\n        min-height: 200px;\n    }\n\n    .e-bigger .control_wrapper,\n    .e-bigger .control-section {\n        border: none;\n    }\n\n    .e-bigger .control-section {\n        margin-top: 60px;\n    }\n\n    .tabs-wrap {\n        padding: 10px;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}