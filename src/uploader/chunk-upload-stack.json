{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"control_wrapper\">\n        <!-- Initialize Uploader -->\n        <input type=\"file\" id=\"fileupload\" name=\"UploadFiles\">\n    </div>\n</div>\n\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n        <tbody><tr>\n            <td class=\"left-side\">Chunk size :</td>\n            <td>\n\t\t\t\t<div id=\"default\">\n\t\t\t\t\t<select id=\"chunk-sizes\"> \n\t\t\t\t\t\t<option value=\"500000\">500 KB</option>\n\t\t\t\t\t\t<option value=\"1000000\">1 MB</option>\n\t\t\t\t\t\t<option value=\"2000000\">2 MB</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n<style>\n    .control_wrapper {\n        max-width: 400px;\n        margin: auto;\n    }\n    .e-upload {\n        width: 100%;\n        position: relative;\n        margin-top: 15px;\n        float: none;\n    }\n    .e-upload .e-upload-actions {\n        float: none;\n        text-align: right;\n    }\n    .control_wrapper .e-upload .e-upload-drag-hover {\n        margin: 0;\n    }\n\t#auto_pause {\n\tpadding-top: 35px;\n\t}\n</style>\n\n\n\n\n</div></body></html>","index.ts":"{{ripple}}import { Uploader, RemovingEventArgs } from '@syncfusion/ej2-inputs';\r\nimport {  DropDownList, ChangeEventArgs  } from '@syncfusion/ej2-dropdowns';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\n/**\r\n * Chunk upload sample\r\n */\r\n\r\n\r\n    let dropElement: HTMLElement = document.getElementsByClassName('control-fluid')[0] as HTMLElement;\r\n    // initialize the uploader component\r\n    let uploadObj: Uploader = new Uploader({\r\n        autoUpload: false,\r\n        maxFileSize: 104857600,\r\n        asyncSettings: {\r\n            saveUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save',\r\n            removeUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: 500000\r\n        },\r\n        removing: onFileRemove,\r\n        chunkFailure: onBeforeFailure,\r\n        dropArea: dropElement,\r\n        pausing: onPausing,\r\n        resuming: onResuming\r\n    });\r\n    uploadObj.appendTo('#fileupload');\r\n    let isInteraction: boolean = false;\r\n    // to update flag variable for automatic pause and resume\r\n    function onPausing(args: any): void {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            isInteraction = true;\r\n        } else {\r\n            isInteraction = false;\r\n        }\r\n    }\r\n    // to update flag variable for automatic pause and resume\r\n    function onResuming(args: any): void {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            isInteraction = true;\r\n        } else {\r\n            isInteraction = false;\r\n        }\r\n    }\r\n    function onFileRemove(args: RemovingEventArgs): void {\r\n        args.postRawFile = false;\r\n    }\r\n    // initialize dropdown component\r\n    let listObj: DropDownList = new DropDownList({\r\n        // set the index value to select an item based on index at initial rendering\r\n        index: 0,\r\n        // set the placeholder to DropDownList input element\r\n        placeholder: 'Select chunk size',\r\n        // set the height of the popup element\r\n        popupHeight: '200px',\r\n        // bind the change event\r\n         change: (e: ChangeEventArgs) => {\r\n            uploadObj.asyncSettings.chunkSize = parseInt(e.itemData.value, 10);\r\n         }\r\n    });\r\n    listObj.appendTo('#chunk-sizes');\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    function onBeforeFailure(args: any): void {\r\n        args.cancel = !isInteraction;\r\n        let  uploadObj: any = (document as any).getElementById('fileupload').ej2_instances[0];\r\n        /* tslint:disable */\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval: any = setInterval(() => {\r\n            if (navigator.onLine && !isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 4) {\r\n                uploadObj.resume(uploadObj.filesData);\r\n                clearSetInterval();\r\n            } else {\r\n                if (!isInteraction && !isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 3) {\r\n                    uploadObj.pause(uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n        // clear Interval after when network is available.\r\n        function clearSetInterval(): void {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    }\r\n"}