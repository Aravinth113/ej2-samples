{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { TreeView } from '@syncfusion/ej2-navigations';\n\n/**\n * TreeView local data sample\n */\n\n    // Hierarchical data source for TreeView component\n    let continents: { [key: string]: Object; }[] = [\n        {\n            code: 'NA', name: 'North America', expanded: true, countries: [\n                { code: 'USA', name: 'United States of America', selected: true },\n                { code: 'CUB', name: 'Cuba' },\n                { code: 'MEX', name: 'Mexico' }\n            ]\n        },\n        {\n            code: 'AF', name: 'Africa', countries: [\n                { code: 'NGA', name: 'Nigeria' },\n                { code: 'EGY', name: 'Egypt' },\n                { code: 'ZAF', name: 'South Africa' }\n            ]\n        },\n        {\n            code: 'AS', name: 'Asia', countries: [\n                { code: 'CHN', name: 'China' },\n                { code: 'IND', name: 'India' },\n                { code: 'JPN', name: 'Japan' }\n            ]\n        },\n        {\n            code: 'EU', name: 'Europe', countries: [\n                { code: 'DNK', name: 'Denmark' },\n                { code: 'FIN', name: 'Finland' },\n                { code: 'AUT', name: 'Austria' }\n            ]\n        },\n        {\n            code: 'SA', name: 'South America', countries: [\n                { code: 'BRA', name: 'Brazil' },\n                { code: 'COL', name: 'Colombia' },\n                { code: 'ARG', name: 'Argentina' }\n            ]\n        },\n        {\n            code: 'OC', name: 'Oceania', countries: [\n                { code: 'AUS', name: 'Australia' },\n                { code: 'NZL', name: 'New Zealand' },\n                { code: 'WSM', name: 'Samoa' }\n            ]\n        },\n        {\n            code: 'AN', name: 'Antarctica', countries: [\n                { code: 'BVT', name: 'Bouvet Island' },\n                { code: 'ATF', name: 'French Southern Lands' }\n            ]\n        },\n    ];\n\n    // Render the TreeView with hierarchical data source\n    let treeObj: TreeView = new TreeView({\n        fields: { dataSource: continents, id: 'code', text: 'name', child: 'countries' }\n    });\n    treeObj.appendTo('#tree');\n\n    // Self-referential list data source for TreeView component\n    let localData: { [key: string]: Object }[] = [\n        { id: 1, name: 'Discover Music', hasChild: true, expanded: true },\n        { id: 2, pid: 1, name: 'Hot Singles', selected: true },\n        { id: 3, pid: 1, name: 'Rising Artists' },\n        { id: 4, pid: 1, name: 'Live Music' },\n        { id: 7, name: 'Sales and Events', hasChild: true },\n        { id: 8, pid: 7, name: '100 Albums - $5 Each' },\n        { id: 9, pid: 7, name: 'Hip-Hop and R&B Sale' },\n        { id: 10, pid: 7, name: 'CD Deals' },\n        { id: 11, name: 'Categories', hasChild: true },\n        { id: 12, pid: 11, name: 'Songs' },\n        { id: 13, pid: 11, name: 'Bestselling Albums' },\n        { id: 14, pid: 11, name: 'New Releases' },\n        { id: 15, pid: 11, name: 'Bestselling Songs' },\n        { id: 16, name: 'MP3 Albums', hasChild: true },\n        { id: 17, pid: 16, name: 'Rock' },\n        { id: 18, pid: 16, name: 'Gospel' },\n        { id: 19, pid: 16, name: 'Latin Music' },\n        { id: 20, pid: 16, name: 'Jazz' },\n        { id: 21, name: 'More in Music', hasChild: true },\n        { id: 22, pid: 21, name: 'Music Trade-In' },\n        { id: 23, pid: 21, name: 'Redeem a Gift Card' },\n        { id: 24, pid: 21, name: 'Band T-Shirts' },\n        { id: 25, name: 'Fiction Book Lists', hasChild: true },\n        { id: 26, pid: 25, name: 'To Kill a Mockingbird' },\n        { id: 27, pid: 25, name: 'Pride and Prejudice' },\n        { id: 28, pid: 25, name: 'Harry Potter' },\n        { id: 29, pid: 25, name: 'The Hobbit' },\n    ];\n\n    // Render the TreeView with list data source\n    let listTreeObj: TreeView = new TreeView({\n        fields: { dataSource: localData, id: 'id', parentID: 'pid', text: 'name', hasChildren: 'hasChild' }\n    });\n    listTreeObj.appendTo('#listtree');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"col-lg-12 control-section\">\n    <div class=\"col-lg-6 nested-data\">\n        <div class=\"content\">\n            <h4>Hierarchical Data</h4>\n            <div id=\"tree\"></div>\n        </div>\n    </div>\n    <div class=\"col-lg-6 list-data\">\n        <div class=\"content\">\n            <h4>List Data</h4>\n            <div id=\"listtree\"></div>\n        </div>\n    </div>\n</div>\n<style>\n    .nested-data, .list-data {\n        padding: 15px;\n        margin-bottom: 25px;\n    }\n    .content {\n        margin: 0 auto;\n        border: 1px solid #dddddd;\n        border-radius: 3px;\n    }\n    .content h4 {\n        padding: 0 10px;\n    }\n</style>\n\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}