{"index.ts":"{{ripple}}import { TreeView, DragAndDropEventArgs } from '@syncfusion/ej2-navigations';\nimport { ListView } from '@syncfusion/ej2-lists';\nimport { closest } from '@syncfusion/ej2-base';\n\n/**\n * TreeView drag and drop sample\n */\n\n    // Hierarchical data source for first TreeView component\n    let productTeam1: { [key: string]: Object }[] = [\n        {\n            id: 't1', name: 'ASP.NET MVC Team', expanded: true,\n            child: [\n                { id: 't2', name: 'Smith' },\n                { id: 't3', name: 'Johnson' },\n                { id: 't4', name: 'Anderson' },\n            ]\n        },\n        {\n            id: 't5', name: 'Windows Team', expanded: true,\n            child: [\n                { id: 't6', name: 'Clark' },\n                { id: 't7', name: 'Wright' },\n                { id: 't8', name: 'Lopez' },\n            ]\n        }\n    ];\n    // Hierarchical data source for second TreeView component\n    let productTeam2: { [key: string]: Object }[] = [\n        {\n            id: 't9', name: 'Web Team', expanded: true,\n            child: [\n                { id: 't10', name: 'Joshua' },\n                { id: 't11', name: 'Matthew' },\n                { id: 't12', name: 'David' },\n            ]\n        },\n        {\n            id: 't13', name: 'Build Team', expanded: true,\n            child: [\n                { id: 't14', name: 'Ryan' },\n                { id: 't15', name: 'Justin' },\n                { id: 't16', name: 'Robert' },\n            ]\n        }\n    ];\n    // Render the first TreeView by mapping its fields property with data source properties\n    let tree1Obj: TreeView = new TreeView({\n        fields: { dataSource: productTeam1, id: 'id', text: 'name', child: 'child' },\n        allowDragAndDrop: true,\n        nodeDragStop: onDragStop\n    });\n    tree1Obj.appendTo('#tree1');\n    // Render the second TreeView by mapping its fields property with data source properties\n    let tree2Obj: TreeView = new TreeView({\n        fields: { dataSource: productTeam2, id: 'id', text: 'name', child: 'child' },\n        allowDragAndDrop: true,\n        nodeDragStop: onDragStop\n    });\n    tree2Obj.appendTo('#tree2');\n    // Render the ListView with custom template\n    let listObj: ListView = new ListView({\n        dataSource: [],\n        cssClass: 'custom-list',\n        template: '<div><span>${text}</span><span id=${iconId} class=${class}></span></div>',\n    });\n    listObj.appendTo('#list');\n    // Drop the dragged TreeView node into ListView\n    let id: number = 1;\n    function onDragStop(event: DragAndDropEventArgs): void {\n        let targetEle: Element = <Element>closest(event.target, '.e-droppable');\n        targetEle = targetEle ? targetEle : event.target;\n        // Check the target as ListView or not\n        if (targetEle && targetEle.classList.contains('custom-list')) {\n            event.cancel = true;\n            let newData: { [key: string]: Object }[] = [];\n            if (event.draggedNode.classList.contains('e-active')) {\n                let selNodes: string[] = this.selectedNodes;\n                for (let i: number = 0, len: number = selNodes.length; i < len; i++) {\n                    let nodeEle: Element = document.querySelector('[data-uid=\"' + selNodes[i] + '\"]').querySelector('.e-list-text');\n                    let nodeText: string = nodeEle.textContent;\n                    let newNode: { [key: string]: Object } = { id: 'l' + id, text: nodeText, class: 'custom-delete', iconId: 'i' + id };\n                    id++;\n                    newData.push(newNode);\n                }\n            } else {\n                let text: string = 'text';\n                let nodeText: string = event.draggedNodeData[text] as string;\n                let newNode: { [key: string]: Object } = { id: 'l' + id, text: nodeText, class: 'custom-delete', iconId: 'i' + id };\n                id++;\n                newData.push(newNode);\n            }\n            listObj.addItem(newData, undefined);\n        }\n    }\n    // Add the custom action for delete icon in ListView\n    document.getElementById('list').addEventListener('mousedown', (event: any) => {\n        if (event.target.classList.contains('custom-delete')) {\n            let node: Element = <Element>closest(event.target, 'li');\n            listObj.removeItem(node);\n        }\n    });\n    document.getElementById('overlay').addEventListener('mousedown', (event: any) => {\n        document.getElementById('overlay').style.display = 'none';\n    });\n","index.html":"<html><head><link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"../node_modules/@syncfusion/ej2/{{theme}}.css\" rel=\"stylesheet\"><style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-12 control-section custom-tree\">\n    <div class=\"col-lg-4 tree1-data\">\n        <h4>TreeView-1</h4>\n        <div class=\"content\">\n            <div id=\"tree1\"></div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 tree2-data\">\n        <h4>TreeView-2</h4>\n        <div class=\"content\">\n            <div id=\"tree2\"></div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 tree3-data\">\n        <h4>ListView</h4>\n        <div class=\"content\">\n            <div id=\"list\" class=\"e-droppable\"></div>\n        </div>\n    </div>\n    <div id=\"overlay\">\n    </div>\n</div>\n<style>\n    #overlay {\n        position: absolute; \n        display: block; \n        width: 100%; \n        height: 100%; \n        z-index: 2; \n        cursor: pointer;\n        background-image: url('//ej2.syncfusion.com/demos/src/treeview/images/usecase/drag_and_drop.png'); \n        background-repeat: no-repeat; \n        background-position: center; \n        background-size: 70%;\n    }\n    #imageContent {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%,-50%);\n        -ms-transform: translate(-50%,-50%);\n    }\n    #list {\n        min-height: 288px;\n    }\n\t.e-bigger #list, .e-bigger #tree1, .e-bigger #tree2 {\n\t\theight: 354px;\n        overflow: auto;\n\t}\n    .custom-tree {\n        overflow: auto;\n    }\n    .custom-tree .control-wrapper {\n        position: relative; \n        min-width: 700px; \n        min-height: 400px; \n        overflow: auto;\n    }\n    .tree1-data, .tree2-data, .tree3-data {\n        padding: 15px;\n        margin-bottom: 25px;\n    }\n    @media (max-width: 1200px) {\n        .tree1-data, .tree2-data, .tree3-data {\n            width: 33.33333333%;\n            float: left;\n        }\n    }\n\t#tree1, #tree2, #list {\n        height: 300px;\n        overflow: auto;\n    }\n    .fabric.e-bigger #list.e-listview .e-list-item,\n    .highcontrast.e-bigger .e-listview .e-list-item {\n        line-height: 43px;\n    }\n    .material.e-bigger #list.e-listview .e-list-item {\n        line-height: 48px;\n    }\n    .bootstrap.e-bigger #list.e-listview .e-list-item {\n        line-height: 47px;\n    }\n    .content {\n        margin: 0 auto;\n        border: 1px solid #dddddd;\n        border-radius: 3px;\n        min-height: 288px;\n    }\n    .custom-delete::before {\n        content: \"îŸ©\";\n\t\tcursor: pointer;\n        color: rgba(0, 0, 0, 0.54);\n        font-size: 15px;\n    }\n    .custom-delete {\n        float: right;\n        font-family: 'e-icons';\n    }\n    .highcontrast .custom-delete::before {\n        color: #fff;\n    }\n\t.highcontrast .e-active.e-list-item .custom-delete::before {\n\t    color: #000;\n\t}\n</style>\n\n\n\n\n</div></body></html>"}