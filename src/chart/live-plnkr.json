{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, LineSeries, Legend, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nChart.Inject(LineSeries, Legend);\n\n/**\n * Line Series\n */\n\nlet series1: Object[] = [];\nlet series2: Object[] = [];\nlet point1: Object;\nlet point2: Object;\nlet value: number = 10;\nlet value1: number = 15;\nlet i: number;\nlet intervalId: number;\n\n\nfor (i = 0; i < 100; i++) {\n\n    if (Math.random() > .5) {\n        if (value < 45) {\n            value += Math.random() * 2.0;\n        } else {\n            value -= 2.0;\n        }\n\n        if (value1 < 40) {\n            value1 += Math.random() * 1.8;\n        } else {\n            value1 -= 2.0;\n        }\n    } else {\n        if (value > 5) {\n            value -= Math.random() * 2.0;\n        } else {\n            value += 2.0;\n        }\n\n        if (value1 > 5) {\n            value1 -= Math.random() * 1.8;\n        } else {\n            value1 += 2.0;\n        }\n    }\n    series1[i] = { x: i, y: value };\n    series2[i] = { x: i, y: value1 + 10 };\n}\n\n\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            majorGridLines: { width: 0 }\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            minimum: 0,\n            maximum: 50,\n            interval: 10\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Line',\n                dataSource: series1,\n                xName: 'x',\n                yName: 'y',\n                fill: '#69D2E7'\n            },\n            {\n                type: 'Line',\n                dataSource: series2,\n                xName: 'x',\n                yName: 'y',\n                fill: '#C4C24A'\n            }\n        ],\n\n        width: '800',\n        height: '350',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    });\n    chart.appendTo('#container');\n\n\n\n    let setTimeoutValue: number = 100;\n    intervalId = setInterval(\n        (): void => {\n            if (Math.random() > .5) {\n                if (value < 45) {\n                    value += Math.random() * 2.0;\n                } else {\n                    value -= 2.0;\n                }\n\n\n                if (value1 < 40) {\n                    value1 += Math.random() * 1.8;\n                } else {\n                    value1 -= 2.0;\n                }\n            } else {\n                if (value > 5) {\n                    value -= Math.random() * 2.0;\n                } else {\n                    value += 2.0;\n                }\n\n                if (value1 > 5) {\n                    value1 -= Math.random() * 1.8;\n                } else {\n                    value1 += 2.0;\n                }\n            }\n\n            series1.push({ x: i.toString(), y: value });\n            series2.push({ x: i.toString(), y: value1 + 10 });\n            i++;\n            series1.shift();\n            series2.shift();\n            chart.series[0].dataSource = series1;\n            chart.series[1].dataSource = series2;\n            chart.refresh();\n        },\n        setTimeoutValue);\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\"></div>\n</div>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}