{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    Chart, Tooltip, Legend, PolarSeries, Category, StackingAreaSeries, RadarSeries, ChartDrawType, ILoadedEventArgs, ChartTheme\n} from '@syncfusion/ej2-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Browser } from '@syncfusion/ej2-base';\nChart.Inject(Tooltip, Legend, PolarSeries, Category, StackingAreaSeries, RadarSeries);\n\n/**\n * Sample for Polar Series with DrawType StackingArea\n */\n\n    let data: Object[] = [\n        // {x: 'China', y: 9635, y1: 10535, y2: 11226, y3: 11218},\n        { x: 'JPN', text: 'Japan', y: 5156, y1: 4849, y2: 4382, y3: 4939 },\n        { x: 'DEU', text: 'Germany', y: 3754, y1: 3885, y2: 3365, y3: 3467 },\n        { x: 'FRA', text: 'France', y: 2809, y1: 2844, y2: 2420, y3: 2463 },\n        { x: 'GBR', text: 'UK', y: 2721, y1: 3002, y2: 2863, y3: 2629 },\n        { x: 'BRA', text: 'Brazil', y: 2472, y1: 2456, y2: 1801, y3: 1799 },\n        { x: 'RUS', text: 'Russia', y: 2231, y1: 2064, y2: 1366, y3: 1281 },\n        { x: 'ITA', text: 'Italy', y: 2131, y1: 2155, y2: 1826, y3: 1851 },\n        { x: 'IND', text: 'India', y: 1857, y1: 2034, y2: 2088, y3: 2256 },\n        { x: 'CAN', text: 'Canada', y: 1843, y1: 1793, y2: 1553, y3: 1529 }\n    ];\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'Category',\n            labelPlacement: 'OnTicks',\n            interval: 1,\n            coefficient: Browser.isDevice ? 80 : 100\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis: {\n            minimum: 0,\n            interval: 5000,\n            maximum: 20000\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Polar', drawType: 'StackingArea', dataSource: data,\n                animation: { enable: true },\n                xName: 'x', yName: 'y', name: '2013'\n            },\n            {\n                type: 'Polar', drawType: 'StackingArea', dataSource: data,\n                animation: { enable: true },\n                xName: 'x', yName: 'y1', name: '2014'\n            },\n            {\n                type: 'Polar', drawType: 'StackingArea', dataSource: data,\n                animation: { enable: true },\n                xName: 'x', yName: 'y2', name: '2015'\n            },\n            {\n                type: 'Polar', drawType: 'StackingArea', dataSource: data,\n                animation: { enable: true },\n                xName: 'x', yName: 'y3', name: '2016'\n            },\n        ],\n        //Initializing Chart Sample\n        title: 'GDP, Current Prices (in Billions)',\n        legendSettings: {\n            visible: true\n        },\n        //Initializing User Interaction Tooltip\n        tooltip: {\n            enable: true\n        },\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        }\n    });\n    chart.appendTo('#container');\n    let polarType: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: () => {\n            chart.series[0].type = <ChartDrawType>polarType.value;\n            chart.series[1].type = <ChartDrawType>polarType.value;\n            chart.series[2].type = <ChartDrawType>polarType.value;\n            chart.series[3].type = <ChartDrawType>polarType.value;\n            chart.series[0].animation.enable = true;\n            chart.series[1].animation.enable = true;\n            chart.series[2].animation.enable = true;\n            chart.series[3].animation.enable = true;\n            chart.refresh();\n        }\n    });\n    polarType.appendTo('#SelectSeriesType');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-lg-9 control-section\">\n        <div id=\"container\"></div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div>Series Type:\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <select id=\"SelectSeriesType\">\t\t\t\t \n                                    <option>Polar</option>\n                                    <option>Radar</option>\n                                </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}