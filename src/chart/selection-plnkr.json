{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, Selection, SelectionMode, ColumnSeries } from '@syncfusion/ej2-charts';\nimport { Legend, Category, ScatterSeries, Marker, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nChart.Inject(Selection, Legend, ColumnSeries, Category, ScatterSeries, Marker);\n\n/**\n * Selection Sample\n */\n\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            title: 'Countries',\n            valueType: 'Category',\n             interval: 1,\n            labelIntersectAction : 'Rotate90'\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            title: 'Percentage (%)',\n            labelFormat: '{value}%',\n            minimum: 0,\n            maximum: 80\n\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Column',\n                dataSource: [\n                    { x: 'CHN', y: 17 }, { x: 'USA', y: 19 },\n                    { x: 'IDN', y: 29 }, { x: 'JAP', y: 13 },\n                    { x: 'BRZ', y: 24 }, { x: 'RUS', y: 16 },\n                    { x: 'GER', y: 13 }, { x: 'NGR', y: 44 },\n                    { x: 'GBR', y: 18 }, { x: 'FRA', y: 19 }\n                ],\n                xName: 'x', width: 2,\n                yName: 'y', name: 'Age 0-14',\n            },\n            {\n                type: 'Column',\n                dataSource: [\n                    { x: 'CHN', y: 54 }, { x: 'USA', y: 67 },\n                    { x: 'IDN', y: 65 }, { x: 'JAP', y: 61 },\n                    { x: 'BRZ', y: 68 }, { x: 'RUS', y: 70 },\n                    { x: 'GER', y: 66 }, { x: 'NGR', y: 53 },\n                    { x: 'GBR', y: 65 }, { x: 'FRA', y: 63 }\n                ],\n                xName: 'x', width: 2,\n                yName: 'y', name: 'Age 15-64',\n            },\n            {\n                type: 'Column',\n                dataSource: [\n                    { x: 'CHN', y: 9 }, { x: 'USA', y: 14 },\n                    { x: 'IDN', y: 6 }, { x: 'JAP', y: 26 },\n                    { x: 'BRZ', y: 8 }, { x: 'RUS', y: 14 },\n                    { x: 'GER', y: 21 }, { x: 'NGR', y: 3 },\n                    { x: 'GBR', y: 17 }, { x: 'FRA', y: 18 }\n                ],\n                xName: 'x', width: 2,\n                yName: 'y', name: 'Age 65 & Above',\n            }\n        ],\n        //Initializing Chart title\n        title: 'Age Distribution by Country', legendSettings: { visible: true, toggleVisibility: false },\n        selectionMode: 'Point',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    });\n    chart.appendTo('#container');\n    let previousType: SelectionMode = 'Point';\n    document.getElementById('selmode').onchange = () => {\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('selmode'));\n        let selectionElement: HTMLInputElement = <HTMLInputElement>(document.getElementById('select'));\n        chart.selectionMode = <SelectionMode>element.value;\n        selectionElement.disabled = (chart.selectionMode.indexOf('Drag') !== -1);\n        if ((chart.selectionMode).indexOf('Drag') !== -1 && previousType.indexOf('Drag') === -1) {\n            chart.series[0].type = 'Scatter'; chart.series[1].type = 'Scatter';\n            chart.series[2].type = 'Scatter';\n            chart.series[0].marker = { visible: true, height: 10, width: 10 };\n            chart.series[1].marker = { visible: true, height: 10, width: 10 };\n            chart.series[2].marker = { visible: true, height: 10, width: 10 };\n            chart.refresh();\n        } else if (previousType.indexOf('Drag') !== -1 && (chart.selectionMode).indexOf('Drag') === -1) {\n            chart.series[0].type = 'Column'; chart.series[1].type = 'Column'; chart.series[2].type = 'Column';\n            chart.refresh();\n        } else if (previousType === 'None' || chart.selectionMode === 'None') {\n            chart.refresh();\n        } else {\n            chart.dataBind();\n        }\n        previousType = <SelectionMode>element.value;\n    };\n    document.getElementById('select').onchange = () => {\n        let element: HTMLInputElement = <HTMLInputElement>(document.getElementById('select'));\n        chart.isMultiSelect = element.checked;\n        chart.dataBind();\n    };\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"container\" style=\"width:92%\"></div>\n        </div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n               <td style=\"width: 60%\">\n                  <div>Selection Mode:</div>\n               </td>\n               <td style=\"width: 40%;\">\n                  <div>\n                     <select name=\"selectIndex\" autocomplete=\"off\" id=\"selmode\" style=\"margin-left: -5px\">\n                        <option value=\"Point\">Point</option>\n                        <option value=\"Series\">Series</option>\n                        <option value=\"Cluster\">Cluster</option>\n                        <option value=\"DragXY\">DragXY</option>\n                        <option value=\"DragX\">DragX</option>\n                        <option value=\"DragY\">DragY</option>\n                        <option value=\"None\">None</option>\n                     </select>\n                  </div>\n               </td>\n            </tr>\n            <tr id=\"\" style=\"height: 50px\">\n               <td style=\"width: 80%\">\n                  <div> Enable MultipleSelection:</div>\n               </td>\n               <td style=\"width: 20%;\">\n                  <div><input type=\"checkbox\" id=\"select\"></div>\n               </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf\": \"syncfusion:ej2-pdf/dist/ej2-pdf.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}