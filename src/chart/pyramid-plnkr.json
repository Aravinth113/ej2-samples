{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    AccumulationChart, AccumulationLegend, PyramidSeries, AccumulationTooltip, AccumulationTheme, IAccLoadedEventArgs,\n    AccumulationDataLabel, IAccTextRenderEventArgs, IAccResizeEventArgs\n} from '@syncfusion/ej2-charts';\nAccumulationChart.Inject(AccumulationLegend, PyramidSeries, AccumulationTooltip, AccumulationDataLabel);\n\n/**\n * Sample for Pyramid Chart\n */\n\n    let data: object[] = [{ x: 'Sweet Treats', y: 120, text: '120 cal' },\n    { x: 'Milk, Youghnut, Cheese', y: 435, text: '435 cal' },\n    { x: 'Meat, Poultry, Fish', y: 475, text: '475 cal' },\n    { x: 'Vegetables', y: 470, text: '470 cal' },\n    { x: 'Fruits', y: 520, text: '520 cal' },\n    { x: 'Bread, Rice, Pasta', y: 930, text: '930 cal' }];\n\n    let chart: AccumulationChart = new AccumulationChart({\n        //Initializing Chart Series\n        series: [{\n            type: 'Pyramid', dataSource: data, xName: 'x', yName: 'y', width: '45%', height: '80%',\n            neckWidth: '15%', gapRatio: 0.03,\n            dataLabel: {\n                name: 'text', visible: true, position: 'Inside', font: {\n                    fontWeight: '600'\n                }\n            }, explode: true, emptyPointSettings: { mode: 'Drop', fill: 'red' }\n        }],\n        legendSettings: {\n            visible: false\n        },\n        //Initializing User Interaction Tooltip\n        tooltip: { enable: true, format: '${point.x} : ${point.y} cal' },\n        textRender: (args: IAccTextRenderEventArgs) => {\n            args.text = args.text;\n        },\n        load: (args: IAccLoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            if (args.accumulation.availableSize.width < args.accumulation.availableSize.height) {\n                args.accumulation.series[0].width = '80%';\n                args.accumulation.series[0].height = '60%';\n            }\n        },\n        resized: (args: IAccResizeEventArgs) => {\n            let bounds: ClientRect = document.getElementById('container').getBoundingClientRect();\n            if (bounds.width < bounds.height) {\n                args.accumulation.series[0].width = '80%';\n                args.accumulation.series[0].height = '60%';\n            } else {\n                args.accumulation.series[0].width = '45%';\n                args.accumulation.series[0].height = '80%';\n            }\n        },\n        //Initializing Chart Title\n        title: 'Food Comparison Chart',\n    });\n    chart.appendTo('#container');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\"></div>\n</div>\n\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}