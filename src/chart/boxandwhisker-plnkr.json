{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    ChartTheme, Chart, getSaturationColor, Category, ILoadedEventArgs,\n    IPointRenderEventArgs, BoxAndWhiskerSeries, Tooltip, getElement, BoxPlotMode\n} from '@syncfusion/ej2-charts';\nChart.Inject(Category, BoxAndWhiskerSeries, Tooltip);\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { EmitType } from '@syncfusion/ej2-base';\n\n/**\n * Sample for Box and Whisker series\n */\n\n    let materialColors: string[] = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n        '#ea7a57', '#404041', '#00bdae'];\n    let fabricColors: string[] = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n        '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\n    let bootstrapColors: string[] = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n        '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\n    let labelRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n            args.fill = fabricColors[args.point.index % 10];\n        } else if (selectedTheme === 'material') {\n            args.fill = materialColors[args.point.index % 10];\n        } else {\n            args.fill = bootstrapColors[args.point.index % 10];\n        }\n        args.border.color = getSaturationColor(args.fill, -0.6);\n    };\n    let chart: Chart = new Chart({\n        //Initializing Primary X and Y Axis\n        primaryXAxis: {\n            valueType: 'Category',\n            majorGridLines: { width: 0 },\n            edgeLabelPlacement: 'Shift',\n            labelIntersectAction: 'Trim'\n        },\n        chartArea: {\n            border: {\n                width: 0\n            }\n        },\n        primaryYAxis:\n        {\n            minimum: 10, maximum: 60,\n            interval: 10, title: 'Age',\n            majorGridLines: { width: 0 },\n            majorTickLines: { width: 0 }\n        },\n        pointRender: labelRender,\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'BoxAndWhisker',\n                dataSource: [\n                    { x: 'Development', y: [22, 22, 23, 25, 25, 25, 26, 27, 27, 28, 28, 29, 30, 32, 34, 32, 34, 36, 35, 38] },\n                    { x: 'Testing', y: [22, 33, 23, 25, 26, 28, 29, 30, 34, 33, 32, 31, 50] },\n                    { x: 'HR', y: [22, 24, 25, 30, 32, 34, 36, 38, 39, 41, 35, 36, 40, 56] },\n                    { x: 'Finance', y: [26, 27, 28, 30, 32, 34, 35, 37, 35, 37, 45] },\n                    { x: 'R&D', y: [26, 27, 29, 32, 34, 35, 36, 37, 38, 39, 41, 43, 58] },\n                    { x: 'Sales', y: [27, 26, 28, 29, 29, 29, 32, 35, 32, 38, 53] },\n                    { x: 'Inventory', y: [21, 23, 24, 25, 26, 27, 28, 30, 34, 36, 38] },\n                    { x: 'Graphics', y: [26, 28, 29, 30, 32, 33, 35, 36, 52] },\n                    { x: 'Training', y: [28, 29, 30, 31, 32, 34, 35, 36] }\n                ],\n                xName: 'x',\n                yName: 'y',\n                marker: {\n                    visible: true,\n                    width: 10,\n                    height: 10\n                },\n                name: 'Department'\n            }\n        ],\n        // Initializing the tooltip\n        tooltip: {\n            enable: true\n        },\n        //Initializing Chart title\n        title: 'Employee Age Group in Various Department',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        },\n        legendSettings: {\n            visible: false\n        }\n    });\n    chart.appendTo('#container');\n\n    let mode: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: () => {\n            chart.series[0].boxPlotMode = <BoxPlotMode>mode.value;\n            chart.series[0].animation.enable = false;\n            chart.refresh();\n        }\n    });\n    mode.appendTo('#mode');\n    document.getElementById('mean').onchange = () => {\n        let element: HTMLInputElement = <HTMLInputElement>getElement('mean');\n        chart.series[0].showMean = element.checked;\n        chart.series[0].animation.enable = false;\n        chart.refresh();\n    };\n","index.html":"<!DOCTYPE html><html><head>\n    <meta charset=\"UTF-8\">\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-lg-9 control-section\">\n        <div id=\"container\"></div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div>Mode:\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <select id=\"mode\">\t\t\t\t \n                            <option value=\"Normal\">Normal</option>        \n                            <option value=\"Exclusive\">Exclusive</option>\n                            <option value=\"Inclusive\">Inclusive</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div>Mean: </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <input type=\"checkbox\" id=\"mean\" checked>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}