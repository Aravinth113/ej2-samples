{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    AccumulationChart, AccumulationLegend, PieSeries, AccumulationTooltip, IAccLoadedEventArgs, IAccTextRenderEventArgs,\n    chartMouseClick, IMouseEventArgs, Index, indexFinder, AccumulationDataLabel, AccumulationChartModel\n} from '@syncfusion/ej2-charts';\nimport { EmitType } from '@syncfusion/ej2-base';\nAccumulationChart.Inject(AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel);\n\n/**\n * Drill down\n */\n\n    let suvs: Object = [{ x: 'Toyota', y: 8 }, { x: 'Ford', y: 12 }, { x: 'GM', y: 17 }, { x: 'Renault', y: 6 }, { x: 'Fiat', y: 3 },\n    { x: 'Hyundai', y: 16 }, { x: 'Honda', y: 8 }, { x: 'Maruthi', y: 10 }, { x: 'BMW', y: 20 }];\n\n    let cars: Object = [{ x: 'Toyota', y: 7 }, { x: 'Chrysler', y: 12 }, { x: 'Nissan', y: 9 }, { x: 'Ford', y: 15 }, { x: 'Tata', y: 10 },\n    { x: 'Mahindra', y: 7 }, { x: 'Renault', y: 8 }, { x: 'Skoda', y: 5 }, { x: 'Volkswagen', y: 15 }, { x: 'Fiat', y: 3 }];\n\n    let pickups: Object = [{ x: 'Nissan', y: 9 }, { x: 'Chrysler', y: 4 }, { x: 'Ford', y: 7 }, { x: 'Toyota', y: 20 },\n    { x: 'Suzuki', y: 13 }, { x: 'Lada', y: 12 }, { x: 'Bentley', y: 6 }, { x: 'Volvo', y: 10 }, { x: 'Audi', y: 19 }];\n\n    let minivans: Object = [{ x: 'Hummer', y: 11 }, { x: 'Ford', y: 5 }, { x: 'GM', y: 12 }, { x: 'Chrysler', y: 3 }, { x: 'Jaguar', y: 9 },\n    { x: 'Fiat', y: 8 }, { x: 'Honda', y: 15 }, { x: 'Hyundai', y: 4 }, { x: 'Scion', y: 11 }, { x: 'Toyota', y: 17 }];\n\n    let clickInstance: AccumulationChartModel = {\n        series: [{ type: 'Pie', dataSource: suvs, xName: 'x', yName: 'y', dataLabel: { visible: true, position: 'Outside' } }],\n        textRender: (args: IAccTextRenderEventArgs) => {\n            args.text = args.point.x + ' ' + args.point.y + ' %';\n        },\n        enableSmartLabels: true,\n        tooltip: { enable: false, format: '${point.x} <br> ${point.y} %' },\n        load: (args: IAccLoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.accumulation.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    };\n    let pointClick: EmitType<IMouseEventArgs> = (args: IMouseEventArgs) => {\n        let index: Index = indexFinder(args.target);\n        if (document.getElementById(pie.element.id + '_Series_' + index.series + '_Point_' + index.point)) {\n            let tooltip: Element = document.getElementsByClassName('e-tooltip-wrap')[0];\n            if (tooltip) { tooltip.remove(); }\n            pie.destroy(); pie.removeSvg();\n            pie = null;\n            switch (index.point) {\n                case 0:\n                    clickInstance.series[0].dataSource = suvs;\n                    clickInstance.title = 'Automobile Sales in the SUV segment';\n                    document.getElementById('text').innerHTML = 'SUV';\n                    break;\n                case 1:\n                    clickInstance.series[0].dataSource = cars;\n                    clickInstance.title = 'Automobile Sales in the Car segment';\n                    document.getElementById('text').innerHTML = 'Car';\n                    break;\n                case 2:\n                    clickInstance.series[0].dataSource = pickups;\n                    clickInstance.title = 'Automobile Sales in the Pickup segment';\n                    document.getElementById('text').innerHTML = 'Pickup';\n                    break;\n                case 3:\n                    clickInstance.series[0].dataSource = minivans;\n                    clickInstance.title = 'Automobile Sales in the Minivan segment';\n                    document.getElementById('text').innerHTML = 'Minivan';\n                    break;\n            }\n            pie = new AccumulationChart(clickInstance);\n            pie.appendTo('#container');\n            document.getElementById('category').style.visibility = 'visible';\n            document.getElementById('symbol').style.visibility = 'visible';\n            document.getElementById('text').style.visibility = 'visible';\n        }\n    };\n    let instance: AccumulationChartModel = {\n        series: [\n            {\n                dataSource: [\n                    { x: 'SUV', y: 25 }, { x: 'Car', y: 37 }, { x: 'Pickup', y: 15 },\n                    { x: 'Minivan', y: 23 }\n                ],\n                dataLabel: {\n                    visible: true, position: 'Inside', connectorStyle: { type: 'Curve', length: '10%' },\n                    font: { size: '14px', color: 'white' }\n                },\n                radius: '70%', xName: 'x', yName: 'y', startAngle: 0, endAngle: 360, innerRadius: '0%',\n                explode: true, explodeOffset: '10%', explodeIndex: 2,\n            }\n        ],\n        enableSmartLabels: false,\n        legendSettings: { visible: false }, chartMouseClick: pointClick,\n        textRender: (args: IAccTextRenderEventArgs) => {\n            args.text = args.point.x + ' ' + args.point.y + ' %';\n        },\n        tooltip: { enable: false, format: '${point.x} <br> ${point.y} %' },\n        title: 'Automobile Sales by Category',\n        load: (args: IAccLoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.accumulation.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    };\n    let pie: AccumulationChart = new AccumulationChart(instance);\n    pie.appendTo('#container');\n    document.getElementById('category').onclick = (e: MouseEvent) => {\n        let tooltip: Element = document.getElementsByClassName('e-tooltip-wrap')[0];\n        if (tooltip) { tooltip.remove(); }\n        pie.destroy(); pie.removeSvg();\n        pie = null; pie = new AccumulationChart(instance);\n        pie.appendTo('#container');\n        (e.target as HTMLButtonElement).style.visibility = 'hidden';\n        document.getElementById('symbol').style.visibility = 'hidden';\n        document.getElementById('text').style.visibility = 'hidden';\n    };\n","index.html":"<html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"link\">\n        <a id=\"category\" style=\"visibility:hidden; display:inline-block\">\n\t\t\t\t\tSales by Category \n\t\t</a>\n        <p style=\"visibility:hidden; display:inline-block\" id=\"symbol\">&#xA0;&gt;&gt;&#xA0;</p>\n        <p id=\"text\" style=\"display:inline-block;\"></p>\n    </div>\n    <div id=\"container\"></div>\n</div>\n\n\n<style>\n    #category:hover {\n        cursor: pointer;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}