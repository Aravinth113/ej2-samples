{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, LineSeries, Category, Legend, Tooltip, ILoadedEventArgs, StripLine, ChartTheme } from '@syncfusion/ej2-charts';\nChart.Inject(LineSeries, Category, Legend, Tooltip, StripLine);\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n/**\n * Sample for Striplines\n */\n\n    let chart: Chart = new Chart({\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'Category', majorGridLines: { width: 0 },\n            //Initializing Striplines\n            stripLines: [\n                {\n                    start: -1, end: 1.5, text: 'Winter', color: 'url(#winter)',\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\n                    border: { width: 0 }, rotation: -90, visible: true\n                }, {\n                    start: 1.5, end: 3.5, text: 'Summer', color: 'url(#summer)',\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\n                    border: { width: 0 }, rotation: -90, visible: true\n                }, {\n                    start: 3.5, end: 4.5, text: 'Spring', color: 'url(#spring)',\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\n                    border: { width: 0 }, rotation: -90, visible: true\n                }, {\n                    start: 4.5, end: 5.5, text: 'Autumn', color: 'url(#autumn)',\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\n                    border: { width: 0 }, rotation: -90, visible: true\n                }, {\n                    start: 5.5, end: 7, text: 'Winter', color: 'url(#winter)',\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\n                    border: { width: 0 }, rotation: -90, visible: true\n                }\n            ]\n        },\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            minimum: 10, maximum: 40, interval: 5,\n            lineStyle: { color: '#808080' }, labelFormat: '{value} Â°C', rangePadding: 'None',\n            //Initializing Striplines\n            stripLines: [\n                {\n                    start: 30, end: 40, text: 'High Temperature', color: '#ff512f', visible: false,\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 },\n                }, {\n                    start: 20, end: 30, text: 'Average Temperature', color: '#fc902a', visible: false,\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 },\n                }, {\n                    start: 10, end: 20, text: 'Low Temperature', visible: false,\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 }, color: '#f9d423'\n                }\n            ]\n        },\n        //Initializing Chart Series\n        series: [\n            {\n                dataSource: [\n                    { x: 'Sun', y: 28 }, { x: 'Mon', y: 27 }, { x: 'Tue', y: 33 }, { x: 'Wed', y: 36 },\n                    { x: 'Thu', y: 28 }, { x: 'Fri', y: 30 }, { x: 'Sat', y: 31 }],\n                xName: 'x', width: 2, yName: 'y', fill: '#ffffff', type: 'Line',\n                name: 'Weather',\n                marker: { visible: true, width: 10, height: 10, border: { width: 2, color: '#ffffff' }, fill: '#666666' },\n            },\n        ],\n        legendSettings: { visible: false },\n        //Initializing Chart Title\n        title: 'Weather Report',\n        //Initializing User Interaction Tooltip\n        tooltip: {\n            enable: true\n        },\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        }\n    });\n    chart.appendTo('#container');\n\n    let mode: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: () => {\n            if (mode.value === 'Vertical') {\n                for (let i: number = 0; i <= 4; i++) {\n                    if (i === 3 || i === 4) { chart.primaryYAxis.stripLines[i] = {}; }\n                    chart.primaryYAxis.stripLines[i].visible = false;\n                    chart.primaryXAxis.stripLines[i].visible = true;\n                }\n            } else {\n                for (let i: number = 0; i <= 4; i++) {\n                    chart.primaryYAxis.stripLines[i].visible = true;\n                    chart.primaryXAxis.stripLines[i].visible = false;\n                }\n            }\n            chart.refresh();\n        }\n    });\n    mode.appendTo('#selmode');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div id=\"container\"></div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td style=\"width: 60%\">\n                    <div>StripLine Orientation:</div>\n                </td>\n                <td style=\"width: 40%;\">\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"selmode\" style=\"margin-left: -5px\">\n                            <option value=\"Vertical\">Vertical</option>\n                            <option value=\"Horizontal\">Horizontal</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #winter stop {\n        stop-color: #4ca1af;\n    }\n\n    #winter stop[offset=\"0\"] {\n        stop-color: #c4e0e5;\n    }\n\n    #winter stop[offset=\"1\"] {\n        stop-color: #4ca1af;\n    }\n\n    #summer stop {\n        stop-color: #ffa751;\n    }\n\n    #summer stop[offset=\"0\"] {\n        stop-color: #ffe259;\n    }\n\n    #summer stop[offset=\"1\"] {\n        stop-color: #ffa751;\n    }\n\n    #spring stop {\n        stop-color: #1d976c;\n    }\n\n    #spring stop[offset=\"0\"] {\n        stop-color: #93f9b9;\n    }\n\n    #spring stop[offset=\"1\"] {\n        stop-color: #1d976c;\n    }\n\n    #autumn stop {\n        stop-color: #603813;\n    }\n\n    #autumn stop[offset=\"0\"] {\n        stop-color: #b29f94;\n    }\n\n    #autumn stop[offset=\"1\"] {\n        stop-color: #603813;\n    }\n</style>\n<svg style=\"height: 0\">\n    <defs>\n        <linearGradient id=\"winter\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"/>\n            <stop offset=\"1\"/>\n        </linearGradient>\n        <linearGradient id=\"summer\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"/>\n            <stop offset=\"1\"/>\n        </linearGradient>\n        <linearGradient id=\"spring\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"/>\n            <stop offset=\"1\"/>\n        </linearGradient>\n        <linearGradient id=\"autumn\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"/>\n            <stop offset=\"1\"/>\n        </linearGradient>\n    </defs>\n</svg>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}