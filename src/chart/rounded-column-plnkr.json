{"theme-color":"/**\n * Initialize the Theme colors\n */\nexport let materialColors: string[] = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexport let fabricColors: string[] = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexport let bootstrapColors: string[] = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    Chart, ColumnSeries, Category, DataLabel,\n    Tooltip, IPointRenderEventArgs, ITooltipRenderEventArgs\n} from '@syncfusion/ej2-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { fabricColors, materialColors, bootstrapColors } from './theme-color';\nChart.Inject(ColumnSeries, DataLabel, Category, Tooltip);\nimport { EmitType } from '@syncfusion/ej2-base';\n\n/**\n * Sample for Column series with rounded corner\n */\nlet labelRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = fabricColors[args.point.index % 10];\n    } else if (selectedTheme === 'material') {\n        args.fill = materialColors[args.point.index % 10];\n    } else {\n        args.fill = bootstrapColors[args.point.index % 10];\n    }\n};\n\n    let chart: Chart = new Chart({\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n        },\n        chartArea: { border: { width: 0 } },\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            minimum: 0, maximum: 300, interval: 50, majorGridLines: { width: 0 },\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Column', xName: 'x', width: 2, yName: 'y',\n                dataSource: [\n                    { x: 'BGD', y: 106, text: 'Bangaladesh' },\n                    { x: 'BTN', y: 103, text: 'Bhutn' },\n                    { x: 'NPL', y: 198, text: 'Nepal' },\n                    { x: 'THA', y: 189, text: 'Thiland' },\n                    { x: 'MYS', y: 250, text: 'Malaysia' }\n                ], name: 'Tiger',\n                cornerRadius: {\n                    bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10\n                },\n                marker: { dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            }\n        ],\n        legendSettings: { visible: false },\n        //Initializing Chart title\n        title: 'Tiger Population - 2016', tooltip: { enable: true },\n        pointRender: labelRender,\n        width: Browser.isDevice ? '100%' : '60%',\n        tooltipRender: (args: ITooltipRenderEventArgs) => {\n            let tooltip: string = args.textCollections;\n            if (tooltip.indexOf('BGD') > -1) {\n                tooltip = tooltip.replace('BGD', 'Bangladesh');\n            } else if (tooltip.indexOf('BTN') > -1) {\n                tooltip = tooltip.replace('BTN', 'Bhutan');\n            } else if (tooltip.indexOf('NPL') > -1) {\n                tooltip = tooltip.replace('NPL', 'Nepal');\n            } else if (tooltip.indexOf('THA') > -1) {\n                tooltip = tooltip.replace('THA', 'Thailand');\n            } else {\n                tooltip = tooltip.replace('MYS', 'Malaysia');\n            }\n            args.textCollections = tooltip;\n        }\n    });\n    chart.appendTo('#container');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\" align=\"center\"></div>\n    <div style=\"float: right; margin-right: 10px;\">Source:\n       <a href=\"https://blogs.scientificamerican.com/extinction-countdown/tiger-populations-increasing/\" target=\"_blank\">www.worldweatheronline.com</a>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}