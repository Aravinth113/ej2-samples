{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    Chart, RangeAreaSeries, Category, ILoadedEventArgs, DateTime, Zoom,\n    ChartTheme, ISeriesRenderEventArgs,\n} from '@syncfusion/ej2-charts';\nChart.Inject(RangeAreaSeries, Category, DateTime, Zoom);\nimport { Browser } from '@syncfusion/ej2-base';\n\n/**\n * Sample for RangeArea series\n */\n\n\n    let series1: Object[] = [];\n    let value: number = 35;\n    let point1: Object;\n\n    for (let i: number = 1; i < 360; i++) {\n        if (Math.random() > .5) {\n            value += Math.random();\n        } else {\n            value -= Math.random();\n        }\n        point1 = {\n            x: new Date(2015, 0, i),\n            high: value, low: value - 10\n        };\n        series1.push(point1);\n    }\n\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'DateTime',\n            edgeLabelPlacement: 'Shift',\n            majorGridLines: { width: 0 }\n        },\n        chartArea: {\n            border: {\n                width: 0\n            }\n        },\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            labelFormat: '{value}ËšC',\n            lineStyle: { width: 0 },\n            majorTickLines: { width: 0 }\n        },\n        zoomSettings:\n        {\n            enableSelectionZooming: true,\n            mode: 'X'\n        },\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'RangeArea',\n                name: 'India',\n                dataSource: series1,\n                xName: 'x', high: 'high', low: 'low', opacity: 0.4,\n                border: {\n                    width: 2\n                }\n            }\n        ],\n        width: Browser.isDevice ? '100%' : '80%',\n        //Initializing Chart Title\n        title: 'Maximum and Minimum Temperature',\n        seriesRender: (args: ISeriesRenderEventArgs) => {\n            let theme: ChartTheme = args.series.chart.theme;\n            let color: string;\n            if (theme === 'Material') {\n                color = '#008E83';\n            } else if (theme === 'Bootstrap') {\n                color = '#7953AC';\n            } else {\n                color = '#335693';\n            }\n            args.series.border.color = color;\n        },\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        },\n        legendSettings: {\n            visible: false\n        }\n    });\n    chart.appendTo('#container');\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\" align=\"center\"></div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}