{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { ChartTheme, Chart, ColumnSeries, Category, DataLabel, Tooltip, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nChart.Inject(ColumnSeries, DataLabel, Category, Tooltip);\nimport { Browser } from '@syncfusion/ej2-base';\n\n/**\n * Column Series with SBS Placement\n */\n\n    let chart: Chart = new Chart({\n        //Initializing Primary X and Y Axis\n        primaryXAxis: {\n            valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n        },\n        chartArea: { border: { width: 0 } },\n        primaryYAxis:\n        {\n            minimum: 0, maximum: 12, interval: 3, majorGridLines: { width: 0 },\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n        },\n        enableSideBySidePlacement: false,\n        // Initialize the chart series\n        series: [\n            {\n                type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Total',\n                dataSource: [{ x: 'Jamesh', y: 10, text: 'Total 10' },\n                { x: 'Michael', y: 9, text: 'Total 9' }, { x: 'John', y: 11, text: 'Total 11' }],\n                columnWidth: 0.5,\n                marker: { dataLabel: { visible: true, name: 'text', position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            },\n            {\n                type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Apple',\n                dataSource: [{ x: 'Jamesh', y: 5 }, { x: 'Michael', y: 4 }, { x: 'John', y: 5 }],\n                columnWidth: 0.4,\n                marker: { dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            }, {\n                type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Orange',\n                dataSource: [{ x: 'Jamesh', y: 4 }, { x: 'Michael', y: 3 }, { x: 'John', y: 4 }],\n                columnWidth: 0.3,\n                marker: { dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            },\n            {\n                type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Grapes',\n                dataSource: [{ x: 'Jamesh', y: 1 }, { x: 'Michael', y: 2 }, { x: 'John', y: 2 }],\n                columnWidth: 0.2,\n                marker: { dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            }\n        ],\n        // Initialize the chart title\n        title: 'Fruit Consumption', tooltip: { enable: true, shared: true },\n        width: Browser.isDevice ? '100%' : '60%',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        }\n    });\n    chart.appendTo('#container');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\" align=\"center\"></div>\n</div>\n\n    <p>\n        In this example, you can see how to render and configure the column type charts. Column type charts are used for comparing\n        the frequency, count, total or average of data in different categories. You can use <code>border</code>,\n        <code>fill</code> properties to customize the vertical rect. <code>dataLabel</code> is used to represent individual\n        data and its value.\n    </p>\n    <p>\n        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.\n    </p>\n    <br>\n    <p style=\"font-weight: 500\">Injecting Module</p>\n    <p>\n        Chart component features are segregated into individual feature-wise modules. To use column series, we need to inject\n        <code>ColumnSeries</code> module using <code>Chart.Inject(ColumnSeries)</code> method.\n    </p>\n    <p>\n        More information on the column series can be found in this\n        <a target=\"_blank\" href=\"http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype\">documentation section</a>.\n    </p>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}