{"theme-color":"/**\n * Initialize the Theme colors\n */\nexport let materialColors: string[] = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexport let fabricColors: string[] = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexport let bootstrapColors: string[] = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, BubbleSeries, Tooltip, IPointRenderEventArgs } from '@syncfusion/ej2-charts';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { fabricColors, bootstrapColors, materialColors } from './theme-color';\nChart.Inject(BubbleSeries, Tooltip);\n\nlet pointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = fabricColors[args.point.index % 10];\n    } else if (selectedTheme === 'material') {\n        args.fill = materialColors[args.point.index % 10];\n    } else {\n        args.fill = bootstrapColors[args.point.index % 10];\n    }\n};\n\n/**\n * Sample for Bubble series\n */\n\n    let chart: Chart = new Chart({\n        // Initializing the Primary X and Y Axis\n        primaryXAxis: {\n            title: 'Literacy Rate',\n            minimum: 60,\n            maximum: 100,\n            interval: 5\n        },\n        primaryYAxis: {\n            title: 'GDP Growth Rate',\n            minimum: 0,\n            maximum: 10,\n            interval: 2.5\n        },\n        width: Browser.isDevice ? '100%' : '60%',\n        // Initializing the chart series\n        series: [\n            {\n                type: 'Bubble',\n                dataSource: [\n                    { x: 92.2, y: 7.8, size: 1.347, text: 'China' },\n                    { x: 74, y: 6.5, size: 1.241, text: 'India' },\n                    { x: 90.4, y: 6.0, size: 0.238, text: 'Indonesia' },\n                    { x: 99.4, y: 2.2, size: 0.312, text: 'US' },\n                    { x: 88.6, y: 1.3, size: 0.197, text: 'Brazil' },\n                    { x: 99, y: 0.7, size: 0.0818, text: 'Germany' },\n                    { x: 72, y: 2.0, size: 0.0826, text: 'Egypt' },\n                    { x: 99.6, y: 3.4, size: 0.143, text: 'Russia' },\n                    { x: 99, y: 0.2, size: 0.128, text: 'Japan' },\n                    { x: 86.1, y: 4.0, size: 0.115, text: 'Mexico' },\n                    { x: 92.6, y: 6.6, size: 0.096, text: 'Philippines' },\n                    { x: 61.3, y: 1.45, size: 0.162, text: 'Nigeria' },\n                    { x: 82.2, y: 3.97, size: 0.7, text: 'Hong Kong' },\n                    { x: 79.2, y: 3.9, size: 0.162, text: 'Netherland' },\n                    { x: 72.5, y: 4.5, size: 0.7, text: 'Jordan' },\n                    { x: 81, y: 3.5, size: 0.21, text: 'Australia' },\n                    { x: 66.8, y: 3.9, size: 0.028, text: 'Mongolia' },\n                    { x: 78.4, y: 2.9, size: 0.231, text: 'Taiwan' }\n                ],\n                minRadius: 3,\n                maxRadius: Browser.isDevice ? 6 : 8,\n                xName: 'x', yName: 'y', size: 'size', name: 'Pound',\n                marker: { dataLabel: { name: 'text' } }\n            },\n        ],\n        // Initiazlize the point render event\n        pointRender: pointRender,\n        title: 'World Countries Details',\n        // Initializing the tooltip with format\n        tooltip: {\n            enable: true,\n            format: '${point.text}<br/>Literacy Rate : <b>${point.x}%</b>' +\n            '<br/>GDP Annual Growth Rate : <b>${point.y}</b><br/>Population : <b>${point.size} Billion</b>'\n        },\n        legendSettings: { visible: false }\n    });\n    chart.appendTo('#container');\n","index.html":"<!DOCTYPE html><html><head>\n    <meta charset=\"UTF-8\">\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\" align=\"center\"></div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}