{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, LineSeries, Crosshair, DateTime, Legend, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nChart.Inject(LineSeries, DateTime, Crosshair, Legend);\n\n/**\n * Crosshair\n */\n\nlet series1: Object[] = [];\nlet series2: Object[] = [];\nlet point1: Object;\nlet point2: Object;\nlet value: number = 60;\nlet value1: number = 50;\nlet i: number;\nfor (i = 1; i < 250; i++) {\n\n    if (Math.random() > .5) {\n        value += Math.random();\n        value1 += Math.random();\n    } else {\n        value -= Math.random();\n        value1 -= Math.random();\n    }\n    point1 = { x: new Date(2000, i, 1), y: value };\n    point2 = { x: new Date(2000, i, 1), y: value1 };\n    series1.push(point1);\n    series2.push(point2);\n}\n\n\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            majorGridLines: { width: 0 },\n            valueType: 'DateTime',\n            crosshairTooltip: { enable: true },\n            labelFormat: 'yMMM'\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            minimum: 10, maximum: 90, interval: 10,\n            title: 'Temperature (Â°F)',\n            rowIndex: 0,\n            crosshairTooltip: {\n                enable: true\n            }\n        },\n        axes: [\n            {\n                majorGridLines: { width: 0 },\n                rowIndex: 0,\n                opposedPosition: true,\n                minimum: 0, maximum: 160, interval: 20,\n                name: 'yAxis',\n                title: 'Rainfall (MM)',\n                crosshairTooltip: { enable: true }\n            }\n        ],\n        series: [\n            {\n                type: 'Line',\n                dataSource: series1,\n                border: { width: 1.5 },\n                xName: 'x', width: 2,\n                yName: 'y', name: 'Temperature',\n            },\n            {\n                type: 'Line',\n                dataSource: series2,\n                name: 'Rainfall',\n                yAxisName: 'yAxis',\n                border: { width: 1.5 },\n                xName: 'x', width: 2,\n                yName: 'y',\n            }\n        ],\n        crosshair: { enable: true },\n        legendSettings: { visible: true },\n        //Initializing Chart title\n        title: 'Weather Condition',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    });\n    chart.appendTo('#container');\n","index.html":"<html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container\" style=\"width:92%\"></div>\n</div>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}