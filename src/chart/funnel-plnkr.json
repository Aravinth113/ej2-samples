{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    AccumulationChart, AccumulationLegend, FunnelSeries, AccumulationTooltip, IAccLoadedEventArgs,\n    AccumulationDataLabel, IAccResizeEventArgs, AccumulationTheme\n} from '@syncfusion/ej2-charts';\nAccumulationChart.Inject(AccumulationLegend, FunnelSeries, AccumulationTooltip, AccumulationDataLabel);\n\n/**\n * Sample for Funnel chart\n */\n\n    let data: object[] = [{ x: 'Renewed', y: 18.20, text: '18.20%' },\n    { x: 'Subscribe', y: 27.3, text: '27.3%' },\n    { x: 'Support', y: 55.9, text: '55.9%' },\n    { x: 'Downloaded', y: 76.8, text: '76.8%' },\n    { x: 'Visited', y: 100, text: '100%' }];\n\n    let chart: AccumulationChart = new AccumulationChart({\n        //Initializing Chart Series\n        series: [{\n            type: 'Funnel', dataSource: data, xName: 'x', yName: 'y', width: '60%', height: '80%',\n            neckWidth: '15%', gapRatio: 0.03, neckHeight: '18%',\n            dataLabel: {\n                name: 'text', visible: true, position: 'Inside', font: {\n                    fontWeight: '600'\n                }\n            }, explode: true,\n        }],\n        //Initializing tooltip\n        tooltip: { enable: true, format: '${point.x} : ${point.y} %' },\n        load: (args: IAccLoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            if (args.accumulation.availableSize.width < args.accumulation.availableSize.height) {\n                args.accumulation.series[0].width = '80%';\n                args.accumulation.series[0].height = '70%';\n            }\n        },\n        resized: (args: IAccResizeEventArgs) => {\n            let bounds: ClientRect = document.getElementById('container').getBoundingClientRect();\n            if (bounds.width < bounds.height) {\n                args.accumulation.series[0].width = '80%';\n                args.accumulation.series[0].height = '70%';\n            } else {\n                args.accumulation.series[0].width = '60%';\n                args.accumulation.series[0].height = '80%';\n            }\n        },\n        //Initializing Chart title\n        title: 'Website Visitors',\n    });\n    chart.appendTo('#container');\n    function neckWidth(value: number): void {\n        chart.series[0].neckWidth = value + '%';\n        document.getElementById('neckWidth').innerHTML = value + '%';\n        chart.removeSvg();\n        chart.refreshSeries();\n        chart.refreshChart();\n    }\n    document.getElementById('chartneckwidth').onpointermove = document.getElementById('chartneckwidth').ontouchmove =\n        document.getElementById('chartneckwidth').onchange = (e: Event) => {\n            neckWidth(+(document.getElementById('chartneckwidth') as HTMLInputElement).value);\n        };\n    function neckHeight(value: number): void {\n        chart.series[0].neckHeight = value + '%';\n        document.getElementById('neckHeight').innerHTML = value + '%';\n        chart.removeSvg();\n        chart.refreshSeries();\n        chart.refreshChart();\n    }\n    document.getElementById('chartneckheight').onpointermove = document.getElementById('chartneckheight').ontouchmove =\n        document.getElementById('chartneckheight').onchange = (e: Event) => {\n            neckHeight(+(document.getElementById('chartneckheight') as HTMLInputElement).value);\n        };\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-lg-9 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"container\"></div> \n        </div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td style=\"width: 30%\">\n                    <div>Neck Width:\n                        <p id=\"neckWidth\" style=\"font-weight: normal;\">15%</p>\n                    </div>\n                </td>\n                <td style=\"width: 70%;\">\n                    <div data-role=\"rangeslider\">\n                        <input type=\"range\" name=\"range-min\" id=\"chartneckwidth\" value=\"15\" min=\"0\" max=\"50\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 30%\">\n                    <div>Neck Height:\n                        <p id=\"neckHeight\" style=\"font-weight: normal;\">18%</p>\n                    </div>\n                </td>\n                <td style=\"width: 70%;\">\n                    <div data-role=\"rangeslider\">\n                        <input type=\"range\" name=\"range-min\" id=\"chartneckheight\" value=\"18\" min=\"0\" max=\"50\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}