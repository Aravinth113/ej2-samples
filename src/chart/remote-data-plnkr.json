{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, ColumnSeries, Category, Legend, Tooltip, IAxisLabelRenderEventArgs, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { EmitType } from '@syncfusion/ej2-base';\nChart.Inject(ColumnSeries, Category, Legend, Tooltip);\n\n/**\n * Remote Data Sample\n */\nlet dataManager: DataManager = new DataManager({\n    url: 'http://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/'\n});\nlet query: Query = new Query().take(5).where('Estimate', 'lessThan', 3, false);\nlet labelRender: EmitType<IAxisLabelRenderEventArgs> = (args: IAxisLabelRenderEventArgs): void => {\n    if (args.axis.orientation === 'Horizontal') {\n        args.text = args.text.split(' ')[0];\n    }\n};\nlet loadedChart: EmitType<Object> = (args: Chart): void => {\n    let div: HTMLElement = document.getElementById('waitingpopup') as HTMLElement;\n    div.style.display = 'none';\n};\n\n    let chart: Chart = new Chart({\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            rangePadding: 'Additional',\n            valueType: 'Category',\n            title: 'Assignee'\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            title: 'Estimate',\n            minimum: 0,\n            maximum: 3,\n            interval: 1\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Column',\n                dataSource: dataManager,\n                xName: 'Assignee', yName: 'Estimate', query: query,\n                name: 'Inprogress'\n            }\n        ],\n        axisLabelRender: labelRender,\n        loaded: loadedChart,\n        load: (args: ILoadedEventArgs): void => {\n            let div: HTMLElement = document.getElementById('waitingpopup');\n            div.style.display = 'block';\n            let width: number = args.chart.element.offsetWidth;\n            let height: number = args.chart.element.offsetHeight;\n            div.style.top = (height ? height : 300 / 2 - 25) + 'px';\n            div.style.left = (width / 2 - 25) + 'px';\n            div.style.display = '';\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        },\n        //Initializing Chart title\n        title: 'Sprint Task Analysis', legendSettings: { visible: false },\n        tooltip: { enable: true, format: 'Name: ${point.x} <br>Story Point: ${point.y}' }\n    });\n    chart.appendTo('#container');\n","index.html":"<html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<style>\n    .waitingpopup {\n        position: absolute;\n        z-index: 100;\n        top: 0;\n        left: 0;\n        background-color: #fff;\n        border-radius: 50%;\n        box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n        width: 50px;\n        height: 50px;\n    }\n    \n    .image {\n        position: absolute;\n        background-repeat: no-repeat;\n        background-image: url('src/chart/images/Medium-36px-spin.gif');\n        background-position: center;\n        width: 50px;\n        height: 50px;\n        padding: 6px;\n    }\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n<div class=\"col-lg-12 control-section\">\n    <div id=\"container\">\n        <div id=\"waitingpopup\" class=\"waitingpopup\" style=\"display:none\">\n            <span id=\"gif\" class=\"image\"></span>\n        </div>\n    </div>\n</div>\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}