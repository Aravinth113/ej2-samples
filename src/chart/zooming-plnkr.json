{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Marker, DateTime, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nimport { Chart, AreaSeries, Legend, Zoom } from '@syncfusion/ej2-charts';\nChart.Inject(AreaSeries, DateTime, Marker, Legend, Zoom);\n\n/**\n * Zooming Sample\n */\n\n    let series1: Object[] = [];\n    let point1: Object;\n    let value: number = 80;\n    let i: number;\n    for (i = 1; i < 500; i++) {\n        if (Math.random() > .5) {\n            value += Math.random();\n        } else {\n            value -= Math.random();\n        }\n        point1 = { x: new Date(1950, i + 2, i), y: value.toFixed(1) };\n        series1.push(point1);\n    }\n    let chart: Chart = new Chart({\n         chartArea : {border : {width : 0}},\n\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            title: 'Years',\n            valueType: 'DateTime',\n            labelFormat: 'yMMM',\n            edgeLabelPlacement: 'Shift',\n            majorGridLines : { width : 0 }\n        },\n\n        //Initializing Primary Y Axis\n        primaryYAxis:\n        {\n            title: 'Profit ($)',\n            rangePadding: 'None',\n            lineStyle : { width: 0 },\n            majorTickLines : {width : 0}\n        },\n\n        //Initializing Chart Series\n        series: [\n            {\n                type: 'Area',\n                dataSource: series1,\n                name: 'Product X',\n                xName: 'x',\n                yName: 'y',\n                fill: 'url(#gradient-chart)',\n                border: { width: 0.5, color: '#00bdae' },\n                animation: { enable: false }\n            },\n        ],\n        //Initializing Zooming\n        zoomSettings:\n        {\n            enableMouseWheelZooming: true,\n            enablePinchZooming: true,\n            enableSelectionZooming: true,\n            mode: 'X'\n        },\n        //Initializing Chart title\n        title: 'Sales History of Product X',\n        legendSettings: { visible: false },\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n        }\n    });\n    chart.appendTo('#container');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<style>\n    #gradient-chart stop {\n\t\tstop-color: #BDEDE9;\n\t}\n\t#gradient-chart stop[offset=\"0\"] {\n\t\tstop-opacity: 0.75;\n\t}\n\t#gradient-chart stop[offset=\"1\"] {\n\t\tstop-opacity: 0;\n\t}\n\t#control-container {\n\t\tpadding: 0px !important;\n\t}\n</style>\n<div class=\"control-section\">\n   <div id=\"container\" style=\"width:92%\"></div>\n</div>\n\n<svg style=\"height: 0\">\n\t<defs>\n        <linearGradient id=\"gradient-chart\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n            <stop offset=\"0\"/>\n            <stop offset=\"1\"/>\n        </linearGradient>\n    </defs>\n</svg>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}