{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport {\n    Chart, Category, Tooltip, ILoadedEventArgs, ChartTheme,\n    Trendlines, ScatterSeries, SplineSeries, LineSeries, TrendlineTypes\n} from '@syncfusion/ej2-charts';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\nChart.Inject(Category, Tooltip, ScatterSeries, SplineSeries, LineSeries, Trendlines);\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n/**\n * Samples for Trend Lines\n */\nlet series1: Object[] = [];\nlet yValue: number[] = [7.66, 8.03, 8.41, 8.97, 8.77, 8.20, 8.16, 7.89, 8.68, 9.48, 10.11, 11.36, 12.34, 12.60, 12.95,\n    13.91, 16.21, 17.50, 22.72, 28.14, 31.26, 31.39, 32.43, 35.52, 36.36,\n    41.33, 43.12, 45.00, 47.23, 48.62, 46.60, 45.28, 44.01, 45.17, 41.20, 43.41, 48.32, 45.65, 46.61, 53.34, 58.53];\nlet point1: Object; let i: number; let j: number = 0;\nfor (i = 1973; i <= 2013; i++) {\n    point1 = { x: i, y: yValue[j] };\n    series1.push(point1); j++;\n}\nlet powerData: object[] = [\n    { x: 1, y: 10 }, { x: 2, y: 50 }, { x: 3, y: 80 }, { x: 4, y: 110 },\n    { x: 5, y: 180 }, { x: 6, y: 220 }, { x: 7, y: 300 }, { x: 8, y: 370 }, { x: 9, y: 490 }, { x: 10, y: 500 }\n];\n\n    let chart: Chart = new Chart({\n        //Initializing Primary X and Y Axis\n        primaryXAxis: { majorGridLines: { width: 0 }, edgeLabelPlacement: 'Shift' },\n        primaryYAxis: {\n            title: 'Rupees against Dollars',\n            interval: 10, lineStyle: { width: 0 }, majorTickLines: { width: 0 }\n        },\n        //Initializing Chart Series\n        series: [{\n            dataSource: series1, xName: 'x', yName: 'y',\n            name: 'Rupees', type: 'Spline',\n            marker: { visible: true },\n            //Initializing TrendLines\n            trendlines: [{ type: 'Linear', width: 3, name: 'Linear',  fill:  '#C64A75' }]\n        }],\n        //Initializing User Interaction Tooltip\n        tooltip: { enable: true },\n        //Initializing Chart Title\n        title: 'Historical Indian Rupee Rate (INR USD)',\n        legendSettings: { visible: false }, chartArea: { border: { width: 0 } },\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        },\n    });\n    chart.appendTo('#container');\n    let forward: NumericTextBox = new NumericTextBox({\n        value: 0, min: 1, max: 20, width: 120, step: 1,\n        change: () => {\n            chart.series[0].animation.enable = false;\n            chart.series[0].trendlines[0].forwardForecast = forward.value;\n            chart.refresh();\n        }\n    });\n    forward.appendTo('#forwardForecast');\n    let backward: NumericTextBox = new NumericTextBox({\n        value: 0, min: 1, max: 20, width: 120, step: 1, change: () => {\n            chart.series[0].animation.enable = false;\n            chart.series[0].trendlines[0].backwardForecast = backward.value;\n            chart.refresh();\n        }\n    });\n    backward.appendTo('#backwardForecast');\n    let polynomial: NumericTextBox = new NumericTextBox({\n        value: 0, min: 1, max: 20, width: 120, step: 1, enabled: false,\n        change: () => {\n            chart.series[0].animation.enable = false;\n            chart.series[0].trendlines[0].polynomialOrder = polynomial.value;\n            chart.refresh();\n        }\n    });\n    polynomial.appendTo('#polynomialOrder');\n    let periodValue: NumericTextBox = new NumericTextBox({\n        value: 0, min: 1, max: 20, width: 120, step: 1, enabled: false,\n        change: () => {\n            chart.series[0].animation.enable = false;\n            chart.series[0].trendlines[0].period = periodValue.value;\n            chart.refresh();\n        }\n    });\n    periodValue.appendTo('#period');\n    let trend: DropDownList = new DropDownList({\n        index: 0, width: 120,\n        change: () => {\n            chart.series[0].animation.enable = false;\n            chart.series[0].dataSource = [];\n            chart.series[0].trendlines[0].type = <TrendlineTypes>trend.value;\n            chart.series[0].trendlines[0].name = <TrendlineTypes>trend.value;\n            let forwardForecast: boolean; let backwardForecast: boolean; let polynomialOrder: boolean; let period: boolean;\n            if (trend.value !== 'Power') {\n                chart.series[0].dataSource = series1; chart.series[0].name = 'Rupees';\n                chart.primaryXAxis.title = ''; chart.primaryYAxis.interval = 10;\n                chart.primaryYAxis.title = 'Rupees against Dollars';\n                chart.title = 'Historical Indian Rupee Rate (INR USD)';\n                if (trend.value === 'MovingAverage') {\n                    chart.series[0].trendlines[0].marker.visible = false;\n                }\n            } else {\n                chart.series[0].dataSource = powerData; chart.series[0].name = 'Meters';\n                chart.primaryXAxis.title = 'Seconds'; chart.primaryYAxis.title = 'Meters';\n                chart.primaryYAxis.interval = 100; chart.title = 'Distance Measurement';\n            }\n            if (trend.value !== 'Polynomial' && trend.value !== 'MovingAverage') {\n                period = polynomialOrder = true; forwardForecast = backwardForecast = false;\n            } else if (trend.value === 'MovingAverage') {\n                period = false; forwardForecast = backwardForecast = polynomialOrder = true;\n            } else {\n                forwardForecast = backwardForecast = polynomialOrder = false; period = true;\n            }\n            forward.enabled = !forwardForecast;\n            backward.enabled = !backwardForecast;\n            polynomial.enabled = !polynomialOrder;\n            periodValue.enabled = !period;\n            chart.refresh();\n        }\n    });\n    trend.appendTo('#trendLineType');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"container\"></div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div>TrendLine Type:\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <select id=\"trendLineType\">\n                            <option value=\"Linear\">Linear</option>\n                            <option value=\"Exponential\">Exponential</option>\n                            <option value=\"Power\">Power</option>\n                            <option value=\"Logarithmic\">Logarithmic</option>\n                            <option value=\"Polynomial\">Polynomial</option>\n                            <option value=\"MovingAverage\">Moving Average</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr id=\"\" style=\"height: 50px\">\n                <td style=\"width: 80%\">\n                    <div> Forward Forecast:</div>\n                </td>\n                <td style=\"width: 20%;\">\n                    <div style=\"margin-top: 0px;\">\n                        <input type=\"text\" id=\"forwardForecast\">\n                    </div>\n                </td>\n            </tr>\n            <tr id=\"\" style=\"height: 50px\">\n                <td style=\"width: 80%\">\n                    <div>Backward Forecast:</div>\n                </td>\n                <td style=\"width: 20%;\">\n                    <div style=\"margin-top: 0px;\">\n                        <input type=\"text\" id=\"backwardForecast\">\n                    </div>\n                </td>\n            </tr>\n            <tr id=\"\" style=\"height: 50px\">\n                <td style=\"width: 80%\">\n                    <div>Polynomial Order:</div>\n                </td>\n                <td style=\"width: 20%;\">\n                    <div style=\"margin-top: 0px;\">\n                        <input type=\"text\" id=\"polynomialOrder\">\n                    </div>\n                </td>\n            </tr>\n            <tr id=\"\" style=\"height: 50px\">\n                <td style=\"width: 80%\">\n                    <div>Period:</div>\n                </td>\n                <td style=\"width: 20%;\">\n                    <div style=\"margin-top: 0px;\">\n                        <input type=\"text\" id=\"period\">\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #container_Series_0_TrendLine_0 {\n        stroke-dasharray: 10px 10px;\n        stroke-linejoin: round; stroke-linecap: round;\n        -webkit-animation: dash 1s linear infinite;\n        animation: dash 1s linear infinite;\n    }\n\n    @-webkit-keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }\n\n    @keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}