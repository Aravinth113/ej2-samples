{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { Chart, LineSeries, ILoadedEventArgs, Series, ChartTheme, getElement } from '@syncfusion/ej2-charts';\nChart.Inject(LineSeries);\nimport { Browser } from '@syncfusion/ej2-base';\n/**\n * Sample for vertical chart\n */\n\n    let interval: number;\n    let chart: Chart = new Chart({\n        //Initializing Primary X Axis\n        primaryXAxis: { title: 'Time (s)', majorGridLines: { width: 0 } },\n        //Initializing Primary Y Axis\n        primaryYAxis: { title: 'Velocity (m/s)', majorGridLines: { width: 0 }, minimum: -15, maximum: 15, interval: 5 },\n        series: [\n            {\n                type: 'Line', xName: 'x', yName: 'y', dataSource: [{ x: 0, y: 0 }],\n                animation: { enable: false }, width: 2\n            }\n        ],\n        chartArea: {\n            border: {\n                width: 0\n            }\n        },\n        //Initializing Vertical Mode \n        isTransposed: true,\n        //Initializing Chart Title\n        title: 'Indonesia - Seismograph Analysis',\n        //Initializing User Interaction Tooltip\n        tooltip: { enable: false },\n        width: Browser.isDevice ? '100%' : '80%',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n        },\n        loaded: (args: ILoadedEventArgs) => {\n            chart.loaded = null;\n            interval =\n                setInterval(\n                    () => {\n                        chart.series[0].dataSource = liveData(chart.series[0].dataSource as any[], <Series>chart.series[0]);\n                        chart.refresh();\n                    },\n                    10\n                );\n        }\n    });\n    chart.appendTo('#container-vertical');\n    let count: number = 0;\n    function liveData(data: any[], series: Series): any[] {\n        count = count + 1;\n        let newData: any[] = data;\n        if (count > 350 || getElement('container-vertical') === null) {\n            clearInterval(interval);\n        } else if (count > 300) {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(0, 0) });\n        } else if (count > 250) {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-2, 1) });\n        } else if (count > 180) {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-3, 2) });\n        } else if (count > 100) {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-7, 6) });\n        } else if (count < 50) {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-3, 3) });\n        } else {\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-9, 9) });\n        }\n        return newData;\n    }\n    function getRandomArbitrary(min: number, max: number): number {\n        return Math.random() * (max - min) + min;\n    }\n    function getXValue(data: any[]): number {\n        return data.length;\n    }\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"container-vertical\" align=\"center\"></div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}