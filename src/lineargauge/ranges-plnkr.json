{"linearRange":"import { LinearGauge, Annotations } from '@syncfusion/ej2-lineargauge';\nLinearGauge.Inject(Annotations);\n\n/**\n * Linear Gauge Range Sample\n */\nexport function linear(): LinearGauge {\n    let gauge: LinearGauge = new LinearGauge({\n        orientation: 'Horizontal',\n        axes: [{\n            labelStyle: {\n                format: '{value}%',\n                font: {\n                    color: '#424242'\n                },\n                offset: 30\n            },\n            line: {\n                width: 0\n            },\n            pointers: [\n                {\n                    value: 35,\n                    height: 10,\n                    width: 10,\n                    markerType: 'Triangle',\n                    placement: 'Near',\n                    offset: -40,\n                    color: '#757575'\n                }\n            ],\n            majorTicks: {\n                height: 0\n            },\n            minorTicks: {\n                height: 0\n            },\n            ranges: [{\n                start: 0,\n                end: 32,\n                color: '#30B32D',\n                startWidth: 15,\n                endWidth: 15\n            },\n            {\n                start: 32,\n                end: 68,\n                startWidth: 15,\n                endWidth: 15,\n                color: '#FFDF00'\n            },\n            {\n                start: 68,\n                end: 100,\n                startWidth: 15,\n                endWidth: 15,\n                color: '#F03E3E'\n            }]\n        }],\n        annotations: [{\n            content: '<div id=\"pointer\" style=\"width:20px\"><h1 style=\"font-size:18px;color:#424242\">35</h1></div>',\n            axisIndex: 0, zIndex: '1',\n            axisValue: 35,\n            y: -50\n        }]\n    });\n    return gauge;\n}","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { LinearGauge, Annotations } from '@syncfusion/ej2-lineargauge';\nimport { linear } from './linearRange';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nLinearGauge.Inject(Annotations);\n\n/**\n * Linear Gauge Range Sample\n */\n\n    let gauge: LinearGauge = new LinearGauge(linear());\n    gauge.appendTo('#rangeContainer');\n    let rangeIndex: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: () => {\n            let value: number = +rangeIndex.value;\n            let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n            let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n            let rangeColor: HTMLSelectElement = <HTMLSelectElement>document.getElementById('color');\n            let startWidth: HTMLInputElement = <HTMLInputElement>document.getElementById('startWidth');\n            let endWidth: HTMLInputElement = <HTMLInputElement>document.getElementById('endWidth');\n            start.value = gauge.axes[0].ranges[value].start.toString();\n            end.value = gauge.axes[0].ranges[value].end.toString();\n            startWidth.value = gauge.axes[0].ranges[value].startWidth.toString();\n            endWidth.value = gauge.axes[0].ranges[value].endWidth.toString();\n            rangeColor.value = gauge.axes[0].ranges[value].color.toString();\n            document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + startWidth.value;\n            document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + endWidth.value;\n            document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;\n            document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;\n            gauge.refresh();\n        }\n    });\n    rangeIndex.appendTo('#rangeIndex');\n\n    document.getElementById('color').onchange = () => {\n        let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('color');\n        gauge.axes[0].ranges[+rangeIndex.value].color = ele.value;\n        gauge.refresh();\n    };\n\n    document.getElementById('startWidth').ontouchmove = document.getElementById('startWidth').onpointermove =\n        document.getElementById('startWidth').onchange = (): void => {\n            let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('startWidth');\n            let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n            gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].startWidth = parseInt(ele.value, 10);\n            document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;\n            gauge.refresh();\n        };\n\n    document.getElementById('endWidth').ontouchmove = document.getElementById('endWidth').onpointermove =\n        document.getElementById('endWidth').onchange = (): void => {\n            let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('endWidth');\n            let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n            gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].endWidth = parseInt(ele.value, 10);\n            document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;\n            gauge.refresh();\n        };\n\n    document.getElementById('start').ontouchmove = document.getElementById('start').onpointermove =\n        document.getElementById('start').onchange = (): void => {\n            let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n            let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n            gauge.axes[0].ranges[+rangeIndex.value].start = parseInt(start.value, 10);\n            gauge.axes[0].ranges[+rangeIndex.value].end = parseInt(end.value, 10);\n            document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;\n            gauge.refresh();\n        };\n\n    document.getElementById('end').ontouchmove = document.getElementById('end').onpointermove =\n        document.getElementById('end').onchange = (): void => {\n            let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n            let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n            gauge.axes[0].ranges[+rangeIndex.value].start = parseInt(start.value, 10);\n            gauge.axes[0].ranges[+rangeIndex.value].end = parseInt(end.value, 10);\n            document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;\n            gauge.refresh();\n        };\n\n    let useRangeColor: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: () => {\n            gauge.axes[0].labelStyle.useRangeColor = (useRangeColor.value === 'range') ? true : false;\n            gauge.refresh();\n        }\n    });\n    useRangeColor.appendTo('#useRangeColor');\n\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div id=\"rangeContainer\" style=\"width:100%\"></div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr>\n                <td>\n                    <div> Select Range</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"rangeIndex\" style=\"width:90%\">\n                            <option value=\"0\">Low</option>\n                            <option value=\"1\">Moderate</option>\n                            <option value=\"2\">High</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Range Color</div>\n                </td>\n                <td>\n                    <div>\n                        <div class=\"e-float-input\" style=\"margin-top: 0px;\">\n                            <input type=\"text\" value=\"#F03E3E\" id=\"color\" style=\"margin-left: -10px\">\n                        </div>\n\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Range Font Color</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"useRangeColor\" style=\"width:90%\">\n                            <option value=\"font\" selected>Default Color</option>\n                            <option value=\"range\">Range Color</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"startRangeValue\">Range Start\n                        <span>&#xA0;&#xA0;&#xA0;0</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"start\" value=\"0\" min=\"0\" max=\"100\" style=\"width:90%;height:34px;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"endRangeValue\">Range End\n                        <span>&#xA0;&#xA0;&#xA0;32</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"end\" value=\"32\" min=\"0\" max=\"100\" style=\"width:90%;height:34px;\">\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td>\n                    <div id=\"startWidthValue\"> Range Start Width\n                        <span>&#xA0;&#xA0;&#xA0;15</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"startWidth\" value=\"15\" min=\"0\" max=\"30\" style=\"width:90%;height:34px;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"endWidthValue\">Range End Width\n                        <span>&#xA0;&#xA0;&#xA0;15</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"endWidth\" value=\"15\" min=\"0\" max=\"30\" style=\"width:90%;height:34px;\">\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}