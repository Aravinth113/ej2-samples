{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { LinearGauge, Point, Annotations, Placement } from '@syncfusion/ej2-lineargauge';\nLinearGauge.Inject(Annotations);\n\n/**\n * Default linear gauge\n */\n\n    let gauge: LinearGauge = new LinearGauge(linearAxes());\n    gauge.appendTo('#axisContainer');\n\n    document.getElementById('opposed').onchange = (sender: Event) => {\n        let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('opposed');\n        gauge.axes[0].opposedPosition = ele.checked;\n        if (ele.checked) {\n            gauge.axes[0].pointers[0].placement = 'Near';\n            gauge.axes[0].pointers[0].markerType = 'Triangle';\n            gauge.axes[0].pointers[0].offset = -20;\n            gauge.axes[0].labelStyle.offset = 0;\n            gauge.annotations[0].x = 10;\n            gauge.annotations[0].y = -60;\n        } else {\n            gauge.axes[0].pointers[0].placement = 'Far';\n            gauge.axes[0].pointers[0].offset = 0;\n            gauge.axes[0].pointers[0].offset = 30;\n            gauge.axes[0].pointers[0].markerType = 'InvertedTriangle';\n            gauge.axes[0].labelStyle.offset = 38;\n            gauge.annotations[0].x = 10;\n            gauge.annotations[0].y = 60;\n        }\n        gauge.refresh();\n    };\n\n    document.getElementById('axisInversed').onchange = (sender: Event) => {\n        let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('axisInversed');\n        gauge.axes[0].isInversed = ele.checked;\n        gauge.refresh();\n    };\n\n    document.getElementById('min').ontouchmove = document.getElementById('min').onpointermove =\n        document.getElementById('min').onchange = () => {\n            let min: HTMLInputElement = <HTMLInputElement>document.getElementById('min');\n            let max: HTMLInputElement = <HTMLInputElement>document.getElementById('max');\n            gauge.axes[0].minimum = parseInt(min.value, 10);\n            gauge.axes[0].maximum = parseInt(max.value, 10);\n            document.getElementById('minValue').innerHTML = 'Axis Minimum <span>&nbsp;&nbsp;&nbsp;' + min.value;\n            gauge.refresh();\n        };\n\n    document.getElementById('max').ontouchmove = document.getElementById('max').onpointermove =\n        document.getElementById('max').onchange = () => {\n            let min: HTMLInputElement = <HTMLInputElement>document.getElementById('min');\n            let max: HTMLInputElement = <HTMLInputElement>document.getElementById('max');\n            gauge.axes[0].maximum = parseInt(max.value, 10);\n            gauge.axes[0].minimum = parseInt(min.value, 10);\n            document.getElementById('maxValue').innerHTML = 'Axis Maximum <span>&nbsp;&nbsp;&nbsp;' + max.value;\n            gauge.refresh();\n        };\n\n    document.getElementById('format').onchange = () => {\n        let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('format');\n        gauge.axes[0].labelStyle.format = ele.value.indexOf('{value}') > -1 ? ele.value : gauge.axes[0].labelStyle.format;\n        gauge.refresh();\n    };\n\n    document.getElementById('pointerType').onchange = () => {\n        let place: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointerPlace');\n        let ele: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointerType');\n        let marker: HTMLSelectElement = <HTMLSelectElement>document.getElementById('markerType');\n        gauge.axes[0].pointers[0].type = <Point>ele.value;\n        place.disabled = (<Point>ele.value === 'Marker') ? false : true;\n        marker.disabled = (<Point>ele.value === 'Marker') ? false : true;\n        gauge.refresh();\n    };\n\n    document.getElementById('pointerPlace').onchange = () => {\n        let ele: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointerPlace');\n        gauge.axes[0].pointers[0].placement = <Placement>ele.value;\n        gauge.refresh();\n    };\n\n\nexport function getRandomArbitrary(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n}\n\nexport function linearAxes(): LinearGauge {\n    let gauge: LinearGauge = new LinearGauge({\n        orientation: 'Horizontal',\n        axes: [{\n            line: {\n                color: '#9E9E9E'\n            },\n            pointers: [{\n                value: 10,\n                height: 15,\n                width: 15,\n                color: '#757575',\n                offset: 30\n            }],\n            majorTicks: {\n                color: '#9E9E9E',\n                interval: 10\n            },\n            minorTicks: {\n                color: '#9E9E9E',\n                interval: 2\n            },\n            labelStyle: {\n                font: {\n                    color: '#424242'\n                },\n                offset: 48\n            }\n        }],\n        annotations: [{\n            content: '<div id=\"pointer\" style=\"width:70px\"><h1 style=\"font-size:14px;color:#424242\">10 Kms</h1></div>',\n            axisIndex: 0,\n            axisValue: 10,\n            x: 10,\n            y: 60\n        }]\n    });\n    return gauge;\n}","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"axisContainer\"></div>\n        </div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n            <tbody><tr>\n                <td>\n                    <div id=\"minValue\">Axis Minimum <span>&#xA0;&#xA0;&#xA0;0</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"min\" value=\"0\" min=\"0\" max=\"100\" style=\"width:90%;height:34px\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"maxValue\">Axis Maximum <span>&#xA0;&#xA0;&#xA0;100</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"max\" value=\"100\" min=\"0\" max=\"100\" style=\"width:90%;height:34px\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Inversed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"axisInversed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Opposed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"opposed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Label Format</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"text\" value=\"{value}\" id=\"format\" class=\"form-control\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Pointer type</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerType\" class=\"form-control\" style=\"width:90%\">\n                        <option value=\"Marker\" selected>Marker</option>\n                        <option value=\"Bar\">Bar</option>\n                     </select>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Marker Placement</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerPlace\" class=\"form-control\" style=\"width:90%\">\n                        <option value=\"Near\">Near</option>\n                        <option value=\"Center\">Center</option>\n                         <option value=\"Far\" selected>Far</option>\n                     </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    .property-panel-section {\n        height: 380px;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}