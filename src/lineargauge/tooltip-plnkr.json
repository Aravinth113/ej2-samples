{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\nimport { LinearGauge, GaugeTooltip, Annotations } from '@syncfusion/ej2-lineargauge';\nimport { IAxisLabelRenderEventArgs, ILoadedEventArgs, ILoadEventArgs } from '@syncfusion/ej2-lineargauge';\nimport { ITooltipRenderEventArgs, IResizeEventArgs } from '@syncfusion/ej2-lineargauge';\nLinearGauge.Inject(Annotations, GaugeTooltip);\n\n/**\n * Linear Gauge Tooltip Sample\n */\nlet gauge: LinearGauge;\n\n    gauge = new LinearGauge({\n        container: {\n            width: 140,\n            border: {\n                width: 2,\n                color: '#a6a6a6'\n            }\n        },\n        tooltip: {\n            enable: true,\n            fill: '#fffff',\n            textStyle: {\n                color: '#fffff'\n            }\n        },\n        orientation: 'Horizontal',\n        axes: [\n            {\n                minimum: 0,\n                maximum: 10,\n                line: {\n                    offset: 140\n                },\n                majorTicks: {\n                    interval: 1\n                },\n                minorTicks: {\n                    interval: 0.2\n                },\n                labelStyle: {\n                    font: {\n                        color: '#000000'\n                    }\n                },\n                pointers: [{\n                    type: 'Bar',\n                    value: 5.4,\n                    offset: 15,\n                    color: '#ff66b3'\n                }],\n            },\n            {\n                opposedPosition: true,\n                minimum: 0,\n                maximum: 25,\n                line: {\n                    offset: -140,\n                },\n                labelStyle: {\n                    font: {\n                        color: '#000000'\n                    }\n                },\n                majorTicks: {\n                    interval: 1\n                },\n                minorTicks: {\n                    interval: 0.2\n                },\n                pointers: [{\n                    type: 'Bar',\n                    offset: -15,\n                    value: 16.5,\n                    color: '#4d94ff'\n                }]\n            }\n        ],\n        annotations: [\n            {\n                content: '<div id=\"first\"><h1 style=\"font-size:15px\">Inches</h1></div>',\n                axisIndex: 0,\n                axisValue: 5.4,\n                x: 35,\n                y: -58,\n                zIndex: '1'\n            },\n            {\n                content: '<div id=\"second\"><h1 style=\"font-size:15px\">Centimeters</h1></div>',\n                axisIndex: 1,\n                axisValue: 16.5,\n                x: 50,\n                y: 52,\n                zIndex: '1'\n            }\n        ],\n        axisLabelRender: labelRender,\n        tooltipRender: renderTooltip,\n        load: gaugeLoad,\n        loaded: gaugeLoaded,\n        resized: gaugeResized,\n    });\n    gauge.appendTo('#tooltipContainer');\n\n\nfunction renderTooltip(args: ITooltipRenderEventArgs): void {\n    args.content = (args.axis.visibleRange.max === 25) ? args.content + ' cm' : args.content + ' in';\n}\n\nfunction labelRender(args: IAxisLabelRenderEventArgs): void {\n    if (args.axis.visibleRange.min === args.value || args.axis.visibleRange.max === args.value) {\n        args.text = '';\n    }\n}\n\nfunction gaugeResized(args: IResizeEventArgs): void {\n    if (args.currentSize.width < 500) {\n        gauge.axes[1].majorTicks.interval = 2;\n        gauge.axes[1].minorTicks.interval = 1;\n        gauge.orientation = 'Vertical';\n        gauge.annotations[0].x = -57;\n        gauge.annotations[0].y = -30;\n        gauge.annotations[1].x = 50;\n        gauge.annotations[1].y = -45;\n    } else {\n        gauge.axes[1].majorTicks.interval = 1;\n        gauge.axes[1].minorTicks.interval = 0.5;\n        gauge.orientation = 'Horizontal';\n        gauge.annotations[0].x = 35;\n        gauge.annotations[0].y = -58;\n        gauge.annotations[1].x = 50;\n        gauge.annotations[1].y = 52;\n    }\n}\n\nfunction gaugeLoad(args: ILoadEventArgs): void {\n    let width: number = parseInt(((this.width, this.element.offsetWidth) || this.element.offsetWidth || 600), 10);\n    if (width < 500) {\n        gauge.axes[1].majorTicks.interval = 2;\n        gauge.axes[1].minorTicks.interval = 1;\n        gauge.orientation = 'Vertical';\n        gauge.annotations[0].x = -57;\n        gauge.annotations[0].y = -30;\n        gauge.annotations[1].x = 50;\n        gauge.annotations[1].y = -45;\n    } else {\n        gauge.axes[1].majorTicks.interval = 1;\n        gauge.axes[1].minorTicks.interval = 0.5;\n        gauge.orientation = 'Horizontal';\n        gauge.annotations[0].x = 35;\n        gauge.annotations[0].y = -58;\n        gauge.annotations[1].x = 50;\n        gauge.annotations[1].y = 52;\n    }\n}\n\nfunction gaugeLoaded(args: ILoadedEventArgs): void {\n    if (document.getElementById('tooltipContainer')) {\n        if (gauge.availableSize.width < 500) {\n            document.getElementById('tooltipContainer_Annotation_0').style.transform = 'rotate(270deg)';\n            document.getElementById('tooltipContainer_Annotation_1').style.transform = 'rotate(270deg)';\n        } else {\n            document.getElementById('tooltipContainer_Annotation_0').style.transform = '';\n            document.getElementById('tooltipContainer_Annotation_1').style.transform = '';\n        }\n    }\n}\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div id=\"tooltipContainer\"></div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}