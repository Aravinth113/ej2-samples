{"pointer-gauge":"/**\n * Pointer Customization Sample\n */\nimport { CircularGauge, Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#ff5985' },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#ff5985' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                type: 'RangeBar',\n                value: 66,\n                radius: '90%',\n                color: '#ff5985',\n                pointerWidth: 10,\n                animation: { enable: true, duration: 1000 }\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '20%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Range Bar</div>'\n                }\n            ]\n        }],\n    });\n    return gauge1;\n}\n\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#01aebe' },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#01aebe' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                radius: '100%',\n                value: 80,\n                type: 'Marker',\n                markerShape: 'InvertedTriangle',\n                markerWidth: 15,\n                markerHeight: 15,\n                color: 'rgb(0,171,169)'\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '20%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Inverted Triangle</div>'\n                }\n            ]\n        }],\n    });\n    return gauge2;\n}\n\nexport function gauge3(): CircularGauge {\n    let gauge3: CircularGauge = new CircularGauge({\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#1E7145' },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#1E7145' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                type: 'Marker',\n                markerShape: 'Triangle',\n                radius: '100%',\n                animation: { enable: true, duration: 1000 },\n                value: 70,\n                markerWidth: 15,\n                markerHeight: 15,\n                color: '#1E7145',\n                border: {\n                    width: 1,\n                    color: ' #1E7145'\n                }\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '20%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Triangle</div>'\n                }\n            ]\n        }],\n    });\n    return gauge3;\n}\n\nexport function gauge4(): CircularGauge {\n    let gauge4: CircularGauge = new CircularGauge({\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#9250e6' },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#9250e6' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                radius: '100%',\n                animation: { enable: true, duration: 900 },\n                value: 70,\n                color: '#923C99',\n                pointerWidth: 6,\n                cap: { radius: 0 },\n                needleTail: { length: '4%', color: '#923C99' }\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '20%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Needle</div>'\n                }\n            ]\n        }],\n    });\n    return gauge4;\n}\n\nexport function gauge5(): CircularGauge {\n    let gauge5: CircularGauge = new CircularGauge({\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 0 },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#067bc2' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                radius: '100%',\n                animation: { enable: true, duration: 900 },\n                value: 40,\n                color: '#067bc2',\n                pointerWidth: 6,\n                cap: { radius: 0 },\n                needleTail: { length: '4%', color: '#067bc2' }\n            }, {\n                radius: '100%',\n                type: 'RangeBar',\n                animation: { enable: true, duration: 900 },\n                value: 40,\n                color: '#067bc2',\n                pointerWidth: 5\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '20%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Live Update</div>'\n                }\n            ]\n        }],\n    });\n    return gauge5;\n}\n","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * Pointer sample\n */\nimport { CircularGauge, Annotations } from '@syncfusion/ej2-circulargauge';\nimport { gauge1, gauge2, gauge3, gauge4, gauge5 } from './pointer-gauge';\nCircularGauge.Inject(Annotations);\n\n\n    let firstgauge: CircularGauge = new CircularGauge(gauge1());\n    let gauge5Interval1: number;\n    let gauge6Interval1: number;\n    firstgauge.appendTo('#container2');\n    let secondgauge: CircularGauge = new CircularGauge(gauge2());\n    secondgauge.appendTo('#container1');\n    let thirdgauge: CircularGauge = new CircularGauge(gauge3());\n    thirdgauge.appendTo('#container3');\n    let fourthgauge: CircularGauge = new CircularGauge({\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#e3a21a' },\n            labelStyle: {\n                position: 'Outside',\n                font: { size: '0px', color: '#e3a21a' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                radius: '80%',\n                value: 80,\n                markerWidth: 5,\n                markerHeight: 5,\n                animation: { enable: true, duration: 1000 },\n                color: '#e3a21a',\n                pointerWidth: 10,\n                cap: {\n                    radius: 8,\n                    color: 'white',\n                    border: {\n                        color: '#e3a21a',\n                        width: 1\n                    }\n                },\n                needleTail: {\n                    length: '20%',\n                    color: '#e3a21a'\n                }\n            }, {\n                radius: '60%', value: 40,\n                markerWidth: 5, markerHeight: 5,\n                animation: { duration: 1000 },\n                color: '#ffb133',\n                pointerWidth: 10,\n                cap: {\n                    radius: 8, color: 'white',\n                    border: { color: '#ffb133', width: 1 }\n                },\n                needleTail: { length: '20%', color: '#e3a21a' }\n            }],\n            annotations: [\n                {\n                    angle: 180, zIndex: '1',\n                    radius: '25%',\n                    content: '<div style=\"color:#757575; font-family:Roboto; font-size:14px;\">Multiple Needle</div>'\n                }\n            ]\n        }],\n    });\n    fourthgauge.appendTo('#container5');\n    let fifthGauge: CircularGauge = new CircularGauge(gauge4());\n    fifthGauge.appendTo('#container4');\n    let sixthGauge: CircularGauge = new CircularGauge(gauge5());\n    sixthGauge.appendTo('#container6');\n\n    this.gauge5Interval1 = setInterval(\n        (): void => {\n            let newVal: number = Math.random() * (90 - 20) + 20;\n            if (document.getElementById('container5')) {\n                fifthGauge.setPointerValue(0, 0, newVal);\n            } else {\n                clearInterval(this.gauge5Interval1);\n            }\n        },\n        1000\n    );\n\n    this.gauge6Interval1 = setInterval(\n        (): void => {\n            let newVal: number = Math.random() * (80 - 30) + 30;\n            if (document.getElementById('container6')) {\n                sixthGauge.setPointerValue(0, 0, newVal);\n                sixthGauge.setPointerValue(0, 1, newVal);\n            } else {\n                clearInterval(this.gauge6Interval1);\n            }\n        },\n        1000\n    );\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div id=\"container1\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container2\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container3\" style=\"height:250px;\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div id=\"container4\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container5\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container6\" style=\"height:250px;\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}