{"datasample-gauge":"/**\n * Annotations\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        axes: [{\n            annotations: [{\n                content: '#germany',\n                angle: 180,\n                radius: '30%'\n            }, {\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:Roboto\">Germany</div>',\n                angle: 180,\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 75, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%'\n                }\n            }]\n        }]\n    });\n    return gauge1;\n}\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        axes: [{\n            annotations: [{\n                content: '#usa',\n                angle: 180,\n                radius: '30%'\n            }, {\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:Roboto\">USA</div>',\n                angle: 180,\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 60, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%'\n                }\n            }]\n        }]\n    });\n    return gauge2;\n}\nexport function gauge3(): CircularGauge {\n    let gauge3: CircularGauge = new CircularGauge({\n        axes: [{\n            annotations: [{\n                content: '#uk',\n                angle: 180,\n                radius: '30%'\n            }, {\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:Roboto\">UK</div>',\n                angle: 180,\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 25, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%'\n                }\n            }]\n        }]\n    });\n    return gauge3;\n}","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * Default sample\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { gauge1, gauge2, gauge3 } from './datasample-gauge';\nimport { Grid } from '@syncfusion/ej2-grids';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\n\n\n    let orderData: Object[] = [\n        {\n            'Country': 'Germany',\n            'Sales': 500,\n            'Target': 400,\n            'vsTarget': 300\n        }, {\n            'Country': 'USA',\n            'Sales': 1000,\n            'Target': 600,\n            'vsTarget': 360\n        }, {\n            'Country': 'UK',\n            'Sales': 600,\n            'Target': 700,\n            'vsTarget': 100\n        }\n    ];\n    let germany: CircularGauge = new CircularGauge(gauge1(), '#container1');\n    let usa: CircularGauge = new CircularGauge(gauge2(), '#container2');\n    let uk: CircularGauge = new CircularGauge(gauge3(), '#container3');\n    let data: Object = new DataManager(orderData).executeLocal(new Query().take(15));\n    let grid: Grid = new Grid(\n        {\n            dataSource: data,\n            columns: [\n                { field: 'Country', headerText: 'Country', width: 80 },\n                { field: 'Sales', headerText: 'Sales $', width: 80 },\n                { field: 'Target', headerText: 'Target $', width: 80 },\n                { field: 'vsTarget', headerText: 'vs Target', width: 80 }\n            ]\n        });\n    grid.appendTo('#container5');\n\n    this.toolTipInterval1 = setInterval(\n        (): void => {\n            if (document.getElementById('container5')) {\n                let value1: number = Math.round(Math.random() * (90 - 55) + 55);\n                let value2: number = Math.round(Math.random() * (75 - 60) + 60);\n                let value3: number = Math.round(Math.random() * (40 - 10) + 10);\n                let gridData1: number = 4 * value1;\n                let gridData2: number = 6 * value2;\n                let gridData3: number = 7 * value3;\n                let orderData: Object[] = [\n                    {\n                        'Country': 'Germany',\n                        'Sales': 500,\n                        'Target': 400,\n                        'vsTarget': gridData1\n                    }, {\n                        'Country': 'USA',\n                        'Sales': 1000,\n                        'Target': 600,\n                        'vsTarget': gridData2\n                    }, {\n                        'Country': 'UK',\n                        'Sales': 600,\n                        'Target': 700,\n                        'vsTarget': gridData3\n                    }\n                ];\n                let data: Object = new DataManager(orderData).executeLocal(new Query().take(3));\n\n                grid.dataSource = data;\n                grid.refresh();\n\n                germany.axes[0].pointers[0].animation.enable = true;\n                usa.axes[0].pointers[0].animation.enable = true;\n                uk.axes[0].pointers[0].animation.enable = true;\n                germany.setPointerValue(0, 0, value1);\n                usa.setPointerValue(0, 0, value2);\n                uk.setPointerValue(0, 0, value3);\n                germany.setAnnotationValue(0, 0, '#germany');\n                usa.setAnnotationValue(0, 0, '#usa');\n                uk.setAnnotationValue(0, 0, '#uk');\n\n\n            } else {\n                clearInterval(this.toolTipInterval1);\n            }\n        },\n        2000);\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <div id=\"container1\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container2\" style=\"height:250px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div id=\"container3\" style=\"height:250px;\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div id=\"container5\">\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n<style>\n    #templateWrap img {\n        width: 16px;\n        height: 16px;\n        margin-top: 4px;\n    }\n\n    #templateWrap .des {\n        float: right;\n        padding-left: 5px;\n    }\n</style>\n<script id=\"germany\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/positive.png\" />\n        <div class='des'>\n            <div style=\"color:#424242;font-size:20px;font-family:Roboto\">${pointers[0].value}%</div>\n        </div>\n    </div>\n</script>\n<script id=\"usa\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/positive.png\" />\n        <div class='des'>\n            <div style=\"color:#424242;font-size:20px;font-family:Roboto\">${pointers[0].value}%</div>\n        </div>\n    </div>\n</script>\n<script id=\"uk\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/negative.png\" />\n        <div class='des'>\n            <div style=\"color:#424242;font-size:20px;font-family:Roboto\">${pointers[0].value}%</div>\n        </div>\n    </div>\n</script>\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf\": \"syncfusion:ej2-pdf/dist/ej2-pdf.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}