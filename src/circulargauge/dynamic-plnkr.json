{"dynamic-gauge":"/**\n * Circulargauge\n */\nimport { CircularGauge, ILoadedEventArgs, IAxisLabelRenderEventArgs, IResizeEventArgs } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nlet gauge1StartAngle: number = 200;\nlet gauge1EndAngle: number = 365;\nlet gauge2StartAngle: number = 110;\nlet gauge2EndAngle: number = 180;\nlet gauge3StartAngle: number = 0;\nlet gauge3EndAngle: number = 70;\nlet gauge1Interval: number = 1;\nlet gauge1FontSize: string = '14px';\nlet gauge1Radius: string = '95%';\nlet subGauge1Radius: string = '95%';\nlet subGauge2Radius: string = '75%';\nlet tickWidth: number = 3;\nlet annotationContent: string = '<div><span>RPM <br/>X 1000</span></div>';\nlet annotationRadius: string = '40%';\nlet annotationAngle: number = 200;\nlet centerX: string = '47%';\nlet centerY: string = '50%';\nlet fuelRadius: string = '40%';\nlet gauge1LineWidth: number = 3;\nlet cloudAngle: number = 10;\nlet tickHeight: number = 10;\nexport function gauge(): CircularGauge {\n\n    let gauge: CircularGauge = new CircularGauge({\n        axes: [\n            {\n                lineStyle: { width: 0 },\n                labelStyle: {\n                    position: 'Inside', format: '####', font: { size: '14px', color: '#565656' }\n                }, majorTicks: {\n                    width: 3, height: 15, color: '#565656', interval: 20\n                }, minorTicks: {\n                    width: 2, height: 10, color: '#565656'\n                },\n                minimum: 0, maximum: 220, radius: '100%',\n                startAngle: 240, endAngle: 120,\n                pointers: [\n                    {\n                        value: 0, radius: '65%',\n                        pointerWidth: 8,\n                        cap: { color: '#FF9200', radius: 9, border: { width: 0, color: '#FF7A00' } },\n                        needleTail: { length: '20%', color: '#FF9200' },\n                        color: '#FF9200',\n                        animation: {\n                            enable: true\n                        }\n                    }\n                ]\n            }, {\n                lineStyle: { width: 3, color: 'url(#bordercolor)' },\n                startAngle: 0,\n                endAngle: 0,\n                radius: '90%',\n                labelStyle: {\n                    font: { size: '0px', color: 'blue' }\n                }, majorTicks: {\n                    height: 0,\n                }, minorTicks: {\n                    height: 0,\n                }, pointers: [],\n                annotations: [{\n                    zIndex: '1', angle: 270,\n                    radius: '100%'\n                }, {\n                    zIndex: '1', angle: 90,\n                    radius: '110%'\n                }, {\n                    zIndex: '1', angle: 90,\n                    radius: '110%'\n                }, {\n                    zIndex: '1', angle: 180,\n                    radius: '40%', content: '0 KM/H'\n                }]\n            }\n        ],\n        load: (args: ILoadedEventArgs) => {\n            let width: number = args.gauge.element.offsetWidth;\n            let height: number = args.gauge.element.offsetHeight;\n            if (width < 700) {\n                gauge1StartAngle = 310; gauge1EndAngle = 50;\n                gauge2StartAngle = 10; gauge2EndAngle = 90;\n                gauge3StartAngle = 270; gauge3EndAngle = 350;\n                gauge1Interval = 2; gauge1FontSize = '10px';\n                gauge1Radius = '70%'; subGauge1Radius = '85%';\n                subGauge2Radius = '65%'; centerX = '50%';\n                centerY = '30%'; cloudAngle = 300;\n                annotationContent = '<div style=\"font-size: 8px;\"><span>RPM X 1000</span></div>';\n                annotationAngle = 180; fuelRadius = '-25%';\n                annotationRadius = '10';\n                tickWidth = 2; tickHeight = 8;\n                gauge1LineWidth = 0;\n                args.gauge.axes[1].annotations[0].radius = '110%';\n                args.gauge.axes[1].annotations[0].angle = 180;\n                args.gauge.axes[1].annotations[1].radius = '20%';\n                args.gauge.axes[1].annotations[1].angle = 40;\n                args.gauge.axes[1].annotations[2].radius = '20%';\n                args.gauge.axes[1].annotations[2].angle = 320;\n                args.gauge.axes[1].annotations[0].content = '<div id=\"rpm\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\n                args.gauge.axes[1].annotations[1].content = '<div id=\"fuel\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\n                args.gauge.axes[1].annotations[2].content = '<div id=\"battery\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\n            } else {\n                width = (width / 3) + 25;\n                args.gauge.axes[1].annotations[0].content =\n                    '<div id=\"rpm\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\n                args.gauge.axes[1].annotations[1].content =\n                    '<div id=\"fuel\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\n                args.gauge.axes[1].annotations[2].content =\n                    '<div id=\"battery\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\n            }\n        },\n        resized: (args: IResizeEventArgs) => {\n            location.reload();\n        }\n    });\n    return gauge;\n}\n\nexport function gauge1(): CircularGauge {\n\n    let gauge: CircularGauge = new CircularGauge({\n        centerX: centerX,\n        centerY: centerY,\n        axes: [\n            {\n                annotations: [\n                    {\n                        content: annotationContent,\n                        angle: annotationAngle,\n                        radius: annotationRadius\n                    }\n                ],\n                lineStyle: {\n                    width: 3,\n                    color: 'url(#bordercolor)'\n                },\n                startAngle: gauge1StartAngle,\n                endAngle: gauge1EndAngle,\n                labelStyle: {\n                    font: {\n                        size: gauge1FontSize,\n                        fontFamily: 'Roboto',\n                        fontWeight: 'Medium',\n                        color: '#231F20'\n                    }\n                }, majorTicks: {\n                    width: 3, height: 10, color: '#565656', interval: gauge1Interval\n                }, minorTicks: {\n                    width: 2, height: 5, color: '#565656'\n                },\n                minimum: 0,\n                maximum: 6,\n                radius: gauge1Radius,\n                pointers: [{\n                    color: '#FF7A00',\n                    cap: { radius: 5, color: 'FF7A00', border: { color: '#FF7A00', width: 0 } },\n                    radius: '60%',\n                    pointerWidth: 5,\n                    value: 1,\n                    animation: { duration: 0 }\n                }]\n            }, {\n                lineStyle: {\n                    width: gauge1LineWidth,\n                    color: 'url(#bordercolor)'\n                },\n                radius: '90%',\n                pointers: [],\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: {\n                    height: 0\n                }, minorTicks: {\n                    height: 0\n                }, startAngle: 156, endAngle: 24\n            }\n        ]\n    });\n    return gauge;\n}\n\nexport function gauge2(): CircularGauge {\n\n    let gauge: CircularGauge = new CircularGauge({\n        axes: [\n            {\n                lineStyle: {\n                    width: tickWidth === 2 ? 0 : 3,\n                    color: '#565656'\n                },\n                startAngle: gauge2StartAngle,\n                endAngle: gauge2EndAngle,\n                labelStyle: {\n                    useRangeColor: true,\n                    font: {\n                        fontFamily: 'Roboto',\n                        fontWeight: 'Medium',\n                        color: '#231F20'\n                    }\n                }, majorTicks: {\n                    width: tickWidth === 2 ? tickWidth : 5,\n                    height: tickHeight === 8 ? tickHeight : 15,\n                    interval: 40,\n                    useRangeColor: true\n                }, minorTicks: {\n                    height: tickHeight,\n                    width: tickWidth,\n                    useRangeColor: true,\n                    interval: 10\n                },\n                minimum: 70,\n                maximum: 110,\n                radius: subGauge2Radius,\n                ranges: [{\n                    start: 70,\n                    end: 70,\n                    color: '#F03E3E',\n                    startWidth: 0, endWidth: 0\n                }, {\n                    start: 71,\n                    end: 109,\n                    color: '#565656',\n                    startWidth: 0, endWidth: 0\n                }, {\n                    start: 110,\n                    end: 110,\n                    color: 'green',\n                    startWidth: 0, endWidth: 0\n                }],\n                pointers: [{\n                    color: '#757575',\n                    type: 'Marker',\n                    cap: { radius: 5, color: 'white', border: { color: 'Teal', width: 2 } },\n                    markerShape: 'Triangle',\n                    markerWidth: 10,\n                    markerHeight: 10,\n                    radius: '90%',\n                    pointerWidth: 5,\n                    value: 90,\n                    animation: { duration: 500 }\n                }],\n                annotations: [{\n                    radius: fuelRadius,\n                    content: '#fuelContent',\n                    angle: 180\n                }]\n            }\n        ],\n        axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\n            args.text = args.value === 70 ? 'F' : 'E';\n        }\n    });\n    return gauge;\n}\nexport function gauge3(): CircularGauge {\n\n    let gauge: CircularGauge = new CircularGauge({\n        axes: [\n            {\n                lineStyle: {\n                    width: tickWidth === 2 ? 0 : 3,\n                    color: '#565656'\n                },\n                startAngle: gauge3StartAngle,\n                endAngle: gauge3EndAngle,\n                labelStyle: {\n                    useRangeColor: true,\n                    font: {\n                        fontFamily: 'Roboto',\n                        fontWeight: 'Medium',\n                        color: '#231F20'\n                    }\n                }, majorTicks: {\n                    width: tickWidth,\n                    height: tickHeight,\n                    interval: 40,\n                    useRangeColor: true\n                }, minorTicks: {\n                    height: tickHeight - 3,\n                    width: tickWidth,\n                    useRangeColor: true,\n                    interval: 10\n                },\n                minimum: 70,\n                maximum: 110,\n                radius: subGauge1Radius,\n                ranges: [{\n                    start: 70,\n                    end: 70,\n                    color: '#F03E3E',\n                    startWidth: 0, endWidth: 0\n                }, {\n                    start: 71,\n                    end: 109,\n                    color: '#565656',\n                    startWidth: 0, endWidth: 0\n                }, {\n                    start: 110,\n                    end: 110,\n                    color: 'green',\n                    startWidth: 0, endWidth: 0\n                }],\n                pointers: [{\n                    color: '#757575',\n                    type: 'Marker',\n                    cap: { radius: 5, color: 'white', border: { color: 'Teal', width: 2 } },\n                    markerShape: 'Triangle',\n                    markerWidth: 10,\n                    markerHeight: 10,\n                    radius: '90%',\n                    pointerWidth: 5,\n                    value: 90,\n                    animation: { duration: 500 }\n                }],\n                annotations: [{\n                    radius: '50%',\n                    content: '#tool',\n                    angle: cloudAngle\n                }]\n            }, {\n                lineStyle: {\n                    width: gauge1LineWidth,\n                    color: 'url(#bordercolor)'\n                },\n                pointers: [],\n                radius: '90%',\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: {\n                    height: 0\n                }, minorTicks: {\n                    height: 0\n                }, startAngle: 333, endAngle: 207\n            }\n        ],\n        axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\n            args.text = args.value === 70 ? 'C' : 'H';\n        }\n    });\n    return gauge;\n}","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * Default sample\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nimport { gauge, gauge1, gauge2, gauge3 } from './dynamic-gauge';\nCircularGauge.Inject(Annotations);\n\n\n    let toolTipInterval: Function;\n    let toolTipInterval1: Function;\n    let GEARS: number[] = [0.14, 0.06, 0.035, 0.027, 0.019];\n    let speed: number = 0;\n    let skip: number = 0;\n    let gear: number = 0;\n    let count: number = 0;\n    let start: boolean = true;\n    let circulargauge1: CircularGauge = new CircularGauge(gauge());\n    circulargauge1.appendTo('#dynamic-container');\n    let circulargauge2: CircularGauge = new CircularGauge(gauge1());\n    circulargauge2.appendTo('#rpm');\n    let circulargauge3: CircularGauge = new CircularGauge(gauge2());\n    circulargauge3.appendTo('#fuel');\n    let circulargauge4: CircularGauge = new CircularGauge(gauge3());\n    circulargauge4.appendTo('#battery');\n    this.toolTipInterval1 = setInterval(\n        (): void => {\n            if (document.getElementById('dynamic-container')) {\n                if (speed < 200 && start) {\n                    count = 0;\n                    circulargauge1.axes[0].pointers[0].animation.duration = 30;\n                    circulargauge2.axes[0].pointers[0].animation.duration = 30;\n                    if (GEARS[gear] * speed > 4 && gear < GEARS.length) {\n                        gear++;\n                        skip = 400 / 50;\n                    }\n                    if (skip-- < 0) {\n                        speed += 0.6 - (0.0017 * speed);\n                    }\n                    circulargauge1.setPointerValue(0, 0, speed);\n                    circulargauge1.setAnnotationValue(1, 3, Math.round(speed) + ' KM/H');\n                    circulargauge2.setPointerValue(0, 0, GEARS[gear] * speed + 0.9);\n                } else {\n                    count = count + 1;\n                    if (start) {\n                        if (count < 200) {\n                            circulargauge1.setAnnotationValue(1, 3, Math.round((Math.random() * (200 - 202) + 202)) + ' KM');\n                            circulargauge1.setPointerValue(0, 0, Math.random() * (200 - 202) + 202);\n                        } else {\n                            speed = 0;\n                            gear = 0;\n                            circulargauge1.axes[0].pointers[0].animation.duration = 2000;\n                            circulargauge2.axes[0].pointers[0].animation.duration = 2000;\n                            circulargauge1.setPointerValue(0, 0, speed);\n                            circulargauge1.setAnnotationValue(1, 3, Math.round(speed) + ' KM/H');\n                            circulargauge2.setPointerValue(0, 0, 0);\n                            start = false;\n                        }\n                    } else {\n                        start = count > 350;\n                    }\n                }\n            } else {\n                clearInterval(this.toolTipInterval1);\n            }\n        },\n        50\n    );\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-1\">\n                </div>\n                <div class=\"col-sm-10\">\n                    <div id=\"dynamic-container\" style=\"height:400px;\">\n                    </div>\n                </div>\n                <div class=\"col-sm-11\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<svg style=\"height: 0\">\n    <defs>\n        <linearGradient id=\"bordercolor\" x1=\"1.8369701987210297e-16\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"30%\" stop-color=\"#565656\" stop-opacity=\"1\"/>\n            <stop offset=\"60%\" stop-color=\"#565656\" stop-opacity=\"1\"/>\n            <stop offset=\"90%\" stop-color=\"#565656\" stop-opacity=\"1\"/>\n            <stop offset=\"100%\" stop-color=\"#565656\" stop-opacity=\"1\"/>\n        </linearGradient>\n    </defs>\n</svg>\n\n\n<script id=\"tool\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/battery.png\">\n    </div>\n</script>\n<script id=\"fuelContent\" type=\"text/x-template\">\n    <div id='templateWrap'>\n        <img src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/fuel.png\">\n    </div>\n</script>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}