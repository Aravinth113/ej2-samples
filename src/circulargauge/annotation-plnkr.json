{"annotation-gauge":"/**\n * Annotations\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nimport { Browser } from '@syncfusion/ej2-base';\nCircularGauge.Inject(Annotations);\n\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        centerY: '45%',\n        resized: (args: object) => {\n            location.reload();\n        },\n        titleStyle: { color: 'black', size: '16px' },\n        axes: [\n            {\n                startAngle: 0, endAngle: 0,\n                lineStyle: { width: 0 }, radius: Browser.isDevice ? '90%' : '70%',\n                ranges: [\n                    {\n                        start: 0, end: 3,\n                        color: 'rgba(29,29,29,0.6)'\n                    }, {\n                        start: 3, end: 12,\n                        color: 'rgba(226, 226, 226, 0.6)'\n                    }\n                ],\n                annotations: [{\n                    angle: 270, radius: '50%', zIndex: '1',\n                    content: '<div id=\"minutes\" style=\"width:75px;height:75px;\"></div>'\n                }, {\n                    angle: 180, radius: '50%', zIndex: '1',\n                    content: '<div id=\"seconds\" style=\"width:75px;height:75px;\"></div>'\n                }, {\n                    angle: 90, zIndex: '1',\n                    radius: '40%',\n                    content: '<div id=\"hr\" style=\"background-color:rgba(29,29,29,0.6); color:white;font-size:12px;\">11:11 AM</div>'\n                }, {\n                    angle: 360, radius: '50%', zIndex: '1',\n                    content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\n                }],\n                labelStyle: {\n                    hiddenLabel: 'First', font: { color: 'rgb(29,29,29)' }, autoAngle: false\n                }, majorTicks: {\n                    width: 2, height: 14, interval: 1, color: 'rgb(29,29,29)'\n                }, minorTicks: {\n                    height: 4, width: 1, interval: 0.2, color: 'rgb(29,29,29)'\n                },\n                minimum: 0, maximum: 12,\n                pointers: [{\n                    pointerWidth: 5, radius: '40%', color: 'rgba(29,29,29,0.8)',\n                    border: { width: 0, color: '#679EEF' },\n                    cap: { radius: 0, border: { width: 0, color: 'red' } },\n                    needleTail: { length: '0%' }, animation: { enable: false }\n                }, {\n                    radius: '60%', pointerWidth: 5, color: 'rgba(29,29,29,0.8)',\n                    border: {\n                        width: 0,\n                        color: 'rgba(29,29,29,0.8)'\n                    },\n                    cap: {\n                        color: 'rgba(29,29,29,0.8)',\n                        radius: 0,\n                        border: {\n                            width: 0,\n                            color: 'red'\n                        }\n\n                    },\n                    needleTail: {\n                        length: '0%'\n                    }, animation: {\n                        enable: false\n                    }\n                }, {\n                    radius: '70%',\n                    pointerWidth: 1,\n                    color: 'rgba(29,29,29,0.8)',\n                    cap: {\n                        color: 'white',\n                        radius: 4,\n                        border: {\n                            width: 2,\n                            color: 'rgba(29,29,29,0.8)'\n                        }\n                    },\n                    border: {\n                        width: 2,\n                        color: 'rgba(29,29,29,0.8)'\n                    },\n                    needleTail: {\n                        color: 'rgba(29,29,29,0.8)',\n                        length: '20%',\n                        border: {\n                            width: 2,\n                            color: 'rgba(29,29,29,0.8)'\n                        },\n                    }, animation: {\n                        enable: false,\n                        duration: 500\n                    }\n                }]\n            }\n        ]\n    });\n    return gauge1;\n}\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        titleStyle: { color: 'black' },\n        axes: [\n            {\n                startAngle: 0, endAngle: 0,\n                lineStyle: { width: 0 },\n                ranges: [\n                    {\n                        start: 0, end: 3,\n                        startWidth: 4, endWidth: 4,\n                        color: 'rgba(29,29,29,0.4)'\n                    }, {\n                        start: 3, end: 12,\n                        startWidth: 4, endWidth: 4,\n                        color: 'rgba(168,145,102,0.1)'\n                    }\n                ],\n                annotations: [{\n                    angle: 270,\n                    radius: '40%',\n                    content: null\n                }, {\n                    angle: 180,\n                    radius: '40%',\n                    content: null\n                }, {\n                    angle: 90,\n                    radius: '50%',\n                    content: null\n                }, {\n                    angle: 360, zIndex: '1',\n                    radius: '35%',\n                    content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\n                }],\n                labelStyle: {\n                    hiddenLabel: 'First',\n                    font: {\n                        color: '#8c8c8c',\n                        size: '0px'\n                    },\n                    autoAngle: false\n                }, majorTicks: {\n                    width: 1,\n                    height: 5,\n                    interval: 1\n                }, minorTicks: {\n                    height: 3,\n                    width: 0.5,\n                    interval: 0.2\n                },\n                minimum: 0,\n                maximum: 12,\n                pointers: [{\n                    radius: '70%',\n                    pointerWidth: 2,\n                    color: 'rgba(29,29,29,1)',\n                    cap: {\n                        color: 'rgba(29,29,29,1)',\n                        radius: 2,\n                        border: {\n                            width: 0.2,\n                            color: 'rgba(168,145,102,1)'\n                        }\n                    },\n                    needleTail: {\n                        color: 'rgba(168,145,102,1)',\n                        length: '10%'\n                    }, animation: {\n                        enable: false,\n                        duration: 500\n                    }\n                }]\n            }\n        ]\n    });\n    return gauge2;\n}","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * Default sample\n */\nimport { CircularGauge, Pointer } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nimport { gauge1, gauge2 } from './annotation-gauge';\nCircularGauge.Inject(Annotations);\n\nfunction calcTime(offset: string): Date {\n    let date: Date = new Date();\n    let localTime: number = date.getTime();\n    let localOffset: number = date.getTimezoneOffset() * 60000;\n    let utc: number = localTime + localOffset;\n    let curretDate: Date = new Date(utc + (3600000 * (+offset)));\n    return curretDate;\n}\n\n\n    let clockInterval: Function; let intervalExecute: boolean = true;\n    let indianTime: CircularGauge = new CircularGauge(gauge1());\n    let subGauge1: CircularGauge; let subGauge2: CircularGauge;\n    indianTime.appendTo('#clockgauge');\n    updateSubGauge1.apply(this);\n    updateSubGauge2.apply(this);\n\n    function updateSubGauge1(): void {\n        subGauge1 = new CircularGauge(gauge2()); subGauge1.appendTo('#minutes');\n    }\n    function updateSubGauge2(): void {\n        subGauge2 = new CircularGauge({\n            axes: [{\n                ranges: [{ start: 0, end: 3, startWidth: 4, endWidth: 4, color: 'rgba(29,29,29,0.4)' },\n                { start: 3, end: 12, startWidth: 4, endWidth: 4, color: 'rgba(168,145,102,0.1)' }],\n                annotations: [{ angle: 270, radius: '40%', content: null },\n                { angle: 180, radius: '40%', content: null },\n                { angle: 90, radius: '50%', content: null },\n                { angle: 360, radius: '35%', zIndex: '1', content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>' }],\n                labelStyle: { hiddenLabel: 'First', font: { color: '#8c8c8c', size: '0px' }, autoAngle: false },\n                majorTicks: { width: 1, height: 5, interval: 1 },\n                minorTicks: { height: 3, width: 0.5, interval: 0.2 }, minimum: 0, maximum: 12,\n                pointers: [{\n                    radius: '70%', pointerWidth: 2, color: 'rgba(29,29,29,1)',\n                    cap: {\n                        color: 'rgba(29,29,29,1)', radius: 2, border: { width: 0.2, color: 'rgba(168,145,102,1)' }\n                    }, needleTail: { color: 'rgba(168,145,102,1)', length: '10%' }, animation: { enable: false, duration: 500 }\n                }], startAngle: 0, endAngle: 0, lineStyle: { width: 0 }\n            }],\n            loaded: intervalExecute ? ((args: {}): void => {\n                if (intervalExecute) {\n                    updateTime(false);\n                    this.clockInterval = setInterval(\n                        (): void => {\n                            updateTime(true, this.clearInterval);\n                        },\n                        1000\n                    );\n                    intervalExecute = false;\n                }\n            }) : null\n        });\n        subGauge2.appendTo('#seconds');\n    }\n\n    function updateTime(enable: boolean, interval?: number): void {\n        if (document.getElementById('clockgauge') && document.getElementsByClassName('e-circulargauge')) {\n            getTime('+5.5', indianTime, enable);\n            if (document.getElementById('minutes').childElementCount) {\n                getTime('+5.5', subGauge1, enable, true);\n            } else {\n                updateSubGauge1(); getTime('+5.5', subGauge1, enable, true);\n            }\n            if (document.getElementById('seconds').childElementCount) {\n                getTime('+5.5', subGauge2, enable, true);\n            } else {\n                updateSubGauge2(); getTime('+5.5', subGauge2, enable, true);\n            }\n        } else {\n            clearInterval(interval);\n        }\n    }\n    function getTime(offset: string, gauge: CircularGauge, enable: boolean, subGauge?: boolean): void {\n        let returnTime: Date = calcTime(offset);\n        let seconds: number = returnTime.getSeconds() * 12 / 60; seconds = seconds === 0 ? 12 : seconds;\n        if (!subGauge) {\n            gauge.axes[0].pointers[2].animation.enable = enable;\n            (<Pointer>gauge.axes[0].pointers[2]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[2]).currentValue;\n        } else {\n            (<Pointer>gauge.axes[0].pointers[0]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[0]).currentValue;\n            gauge.axes[0].pointers[0].animation.enable = (gauge.element.id === 'seconds' && enable);\n        }\n        let hour: number = (returnTime.getHours() + returnTime.getMinutes() / 60) % 12;\n        let minutes: number = returnTime.getMinutes() * 12 / 60 + returnTime.getSeconds() * 12 / 3600;\n        let content: string; let hourValue: number;\n        if (subGauge) {\n            if (gauge.element.id === 'minutes') {\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getMinutes()) + ' M</div>';\n                gauge.setPointerValue(0, 0, minutes); gauge.setAnnotationValue(0, 3, content);\n            } else {\n                gauge.setPointerValue(0, 0, seconds);\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getSeconds()) + ' S</div>';\n                gauge.setAnnotationValue(0, 3, content);\n            }\n        } else {\n            gauge.setPointerValue(0, 0, hour); gauge.setPointerValue(0, 1, minutes); gauge.setPointerValue(0, 2, seconds);\n            hourValue = (Math.floor(returnTime.getHours()) % 12);\n            content = '<div id=\"hr\" style=\"background-color:rgba(226, 226, 226, 0.4);' +\n                'color:rgba(29,29,29,0.9);padding:4px;font-size:12px;\">' +\n                (hourValue === 0 ? 12 : hourValue) + ':' + Math.floor(returnTime.getMinutes()) +\n                (returnTime.getHours() >= 12 ? ' PM' : ' AM') + '</div>';\n            gauge.setAnnotationValue(0, 2, content); let date: Date = new Date();\n            content = '<div id=\"tm\" style=\"font-size:10px;\">' + date.getDate() + '-' +\n                (date.getMonth() + 1) + '-' + date.getFullYear() + '</div>';\n            gauge.setAnnotationValue(0, 3, content);\n        }\n    }\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div id=\"clockgauge\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}