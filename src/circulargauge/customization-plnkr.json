{"customization-gauge":"/**\n * Gauge Customization\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        centerY: '70%',\n        axes: [{\n            annotations: [{\n                content: '<div style=\"color:#666666;font-size:35px;\">1800</div>',\n                angle: 0,\n                zIndex: '1',\n                radius: '110%'\n            }],\n            lineStyle: { width: 0 },\n            startAngle: 300, endAngle: 60,\n            radius: '80%',\n            labelStyle: { font: { size: '0px' } },\n            majorTicks: { width: 0 },\n            minorTicks: { height: 0 },\n            minimum: 999, maximum: 2000,\n            ranges: [{\n                start: 1000, end: 2000,\n                radius: '90%',\n                startWidth: 30, endWidth: 30,\n                color: '#E0E0E0'\n            }],\n            pointers: [{\n                type: 'RangeBar',\n                value: 1800, radius: '90%',\n                color: '#FFDD00', animation: { duration: 0 },\n                pointerWidth: 30\n            }, {\n                radius: '90%', value: 1800,\n                color: '#424242',\n                animation: { duration: 0 },\n                pointerWidth: 9,\n                cap: { radius: 10, color: '#424242', border: { width: 0 } }\n            }]\n        }]\n    });\n    return gauge1;\n}\n\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        axes: [{\n            annotations: [{\n                content: '<div style=\"color:#666666;font-size:35px;\">50.5GB</div>',\n                angle: 180, radius: '0%', zIndex: '1',\n            }, {\n                content: '<div style=\"color:#757575;font-size:15px;\">Used</div>',\n                angle: 180, radius: '25%', zIndex: '1',\n                textStyle: {\n                    fontFamily: 'Roboto',\n                    color: '#9E9E9E',\n                    fontStyle: 'Bold',\n                    fontWeight: 'Regular',\n                    size: '14px'\n                }\n            }],\n            lineStyle: { width: 0 },\n            startAngle: 180, endAngle: 180,\n            radius: '80%',\n            labelStyle: { font: { size: '0px' } },\n            majorTicks: { width: 0 },\n            minorTicks: { height: 0 },\n            minimum: 0, maximum: 100,\n            ranges: [{\n                start: 0, end: 100,\n                radius: '80%', startWidth: 30,\n                endWidth: 30, color: '#E0E0E0'\n            }],\n            pointers: [{\n                type: 'RangeBar',\n                value: 50.5, radius: '80%',\n                color: '#FF2680', animation: { duration: 0 },\n                pointerWidth: 30\n            }]\n        }]\n    });\n    return gauge2;\n}","index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * Gauge Customization sample\n */\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { gauge1, gauge2 } from './customization-gauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n\n    let random: CircularGauge = new CircularGauge(gauge1());\n    random.appendTo('#cutomization-container');\n    let usage: CircularGauge = new CircularGauge(gauge2());\n    let gauge: CircularGauge = random; let isUsage: boolean = false;\n    let barColor: DropDownList; let rangeColor: DropDownList; let pointerColor: DropDownList;\n    barColor = new DropDownList({\n        index: 0, width: 120,\n        change: () => {\n            gauge.axes[0].pointers[0].color = barColor.value.toString();\n            gauge.refresh();\n        }\n    });\n    barColor.appendTo('#barColor');\n    rangeColor = new DropDownList({\n        index: 0, width: 120,\n        change: () => {\n            gauge.axes[0].ranges[0].color = rangeColor.value.toString();\n            gauge.refresh();\n        }\n    });\n    rangeColor.appendTo('#rangeColor');\n    pointerColor = new DropDownList({\n        index: 0, width: 120,\n        change: () => {\n            let color: string = pointerColor.value.toString();\n            if (!isUsage) {\n                gauge.axes[0].pointers[1].color = color;\n                gauge.axes[0].pointers[1].cap.border.color = color;\n                gauge.axes[0].pointers[1].cap.color = color;\n            }\n            gauge.refresh();\n        }\n    });\n    pointerColor.appendTo('#pointerColor');\n    document.getElementById('usage').onclick = () => {\n        random.destroy();\n        usage.appendTo('#cutomization-container');\n        gauge = usage; isUsage = true;\n        let element: HTMLSelectElement = <HTMLSelectElement>document.getElementById('currentValue');\n        element.min = '0.5'; element.max = '100';\n        element.value = usage.axes[0].pointers[0].value.toString();\n        document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;'\n            + usage.axes[0].pointers[0].value + '</span>';\n        barColor.value = usage.axes[0].pointers[0].color; rangeColor.value = usage.axes[0].ranges[0].color;\n        pointerColor.enabled = false;\n        let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n        pointElement.className = 'e-disabled';\n        let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n        let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n        let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n        let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n        currentLine.style.display = 'block';\n        exisLine.style.display = 'none';\n    };\n    document.getElementById('random').onclick = () => {\n        usage.destroy();\n        random.appendTo('#cutomization-container');\n        gauge = random; isUsage = false;\n        let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n        let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n        let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n        let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n        currentLine.style.display = 'block'; exisLine.style.display = 'none';\n        let element: HTMLSelectElement = <HTMLSelectElement>document.getElementById('currentValue');\n        let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n        pointElement.className = 'e-enabled'; pointerColor.enabled = true;\n        element.min = '1000'; element.max = '2000';\n        element.value = random.axes[0].pointers[0].value.toString();\n        document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' +\n            random.axes[0].pointers[0].value + '</span>';\n        barColor.value = random.axes[0].pointers[0].color;\n        rangeColor.value = random.axes[0].ranges[0].color;\n        pointerColor.value = random.axes[0].pointers[1].color;\n    };\n\n    document.getElementById('currentValue').onpointermove = document.getElementById('currentValue').ontouchmove =\n        document.getElementById('currentValue').onchange = () => {\n            let value: number = +(<HTMLInputElement>document.getElementById('currentValue')).value;\n            if (isUsage) {\n                gauge.setPointerValue(0, 0, value);\n            } else {\n                gauge.setPointerValue(0, 0, value);\n                gauge.setPointerValue(0, 1, value);\n            }\n            gauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + (isUsage ? 'GB' : '') + '</div>');\n            document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + value + '</span>';\n        };\n    let selectedTheme: string = location.hash.split('/')[1]; let color: string;\n    if (selectedTheme === 'bootstrap') {\n        color = '#a16ee5';\n    } else if (selectedTheme === 'fabric') {\n        color = '#1783FF';\n    } else {\n        color = '#ff4081';\n    }\n    let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n    let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n    exisLine.style.background = color; currentLine.style.background = color;\n\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"cutomization-container\"></div>\n        </div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td>\n                    <img id=\"random\" src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/gauge1.png\" style=\"margin-left:25px;margin-top:10px;\">\n                    <div id=\"random_line\" style=\"display:block;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 17px;\"></div>\n                </td>\n                <td>\n                    <img id=\"usage\" src=\"http://npmci.syncfusion.com/production/demos/src/circulargauge/images/gauge2.png\" style=\"margin-left:25px;margin-top:10px;\">\n                    <div id=\"usage_line\" style=\"display:none;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 17px;\"></div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"currentPointerValue\">Current Value <span> &#xA0;&#xA0;&#xA0;1800</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"currentValue\" value=\"1800\" min=\"1000\" max=\"2000\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"rangebarColor\">RangeBar Color</div>\n                </td>\n                <td>\n                    <div>\n                        <select id=\"barColor\" class=\"form-control\"> \n                            <option value=\"#FFDD00\" selected=\"true\">#FFDD00</option>\n                            <option value=\"#00bdae\">#00bdae</option>\n                            <option value=\"#FF2680\">#FF2680</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"range\">Range Color</div>\n                </td>\n                <td>\n                    <div>\n                        <select id=\"rangeColor\" class=\"form-control\"> \n                            <option value=\"#E0E0E0\" selected=\"true\">#E0E0E0</option>\n                            <option value=\"#7bb4eb\">#7bb4eb</option>\n                            <option value=\"#ea7a57\">#ea7a57</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"pointColor\">Pointer Color</div>\n                </td>\n                <td>\n                    <div>\n                        <select id=\"pointerColor\" class=\"form-control\"> \n                            <option value=\"#424242\" selected=\"true\">#424242</option>\n                            <option value=\"#6f6fe2\">#6f6fe2</option>\n                            <option value=\"#9e480e\">#9e480e</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}