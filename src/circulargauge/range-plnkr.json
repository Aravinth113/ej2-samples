{"index.ts":"/**\n * Default sample\n */\nimport { CircularGauge, Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        axes: [{\n            lineStyle: { width: 10, color: 'transparent' },\n            labelStyle: {\n                position: 'Inside', useRangeColor: false,\n                font: { size: '12px', color: '#424242', fontFamily: 'Roboto', fontStyle: 'Regular' }\n            }, majorTicks: { height: 10, offset: 5, color: '#9E9E9E' }, minorTicks: { height: 0 },\n            annotations: [{\n                content: '<div><span style=\"font-size:14px; color:#9E9E9E; font-family:Regular\">Speedometer</span></div>',\n                radius: '30%', angle: 0\n            }, {\n                content: '<div><span style=\"font-size:24px; color:#424242; font-family:Regular\">65 MPH</span></div>',\n                radius: '40%', angle: 180\n            }],\n            startAngle: 210, endAngle: 150, minimum: 0, maximum: 120, radius: '80%',\n            ranges: [{ start: 0, end: 40, color: '#30B32D' }, { start: 40, end: 80, color: '#FFDD00' },\n            { start: 80, end: 120, color: '#F03E3E' }],\n            pointers: [{ value: 65, radius: '60%', color: '#757575', pointerWidth: 8,\n                cap: { radius: 7, color: '#757575' }, needleTail: { length: '18%' }\n            }]\n        }]\n    });\n    circulargauge.appendTo('#range-container');\n\n    document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =\n        document.getElementById('start').onchange = () => {\n            let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n            let min: number = parseInt((<HTMLInputElement>document.getElementById('start')).value, 10);\n            document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' + min;\n            circulargauge.axes[0].ranges[index].start = min;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =\n        document.getElementById('end').onchange = () => {\n            let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n            let max: number = parseInt((<HTMLInputElement>document.getElementById('end')).value, 10);\n            document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' + max;\n            circulargauge.axes[0].ranges[index].end = max;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('startWidth').onpointermove = document.getElementById('startWidth').ontouchmove =\n        document.getElementById('startWidth').onchange = () => {\n            let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n            let startWidth: number = parseInt((<HTMLInputElement>document.getElementById('startWidth')).value, 10);\n            document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' + startWidth;\n            circulargauge.axes[0].ranges[index].startWidth = startWidth;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('endWidth').onpointermove = document.getElementById('endWidth').ontouchmove =\n        document.getElementById('endWidth').onchange = () => {\n            let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n            let endWidth: number = parseInt((<HTMLInputElement>document.getElementById('endWidth')).value, 10);\n            document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' + endWidth;\n            circulargauge.axes[0].ranges[index].endWidth = endWidth;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('rangeColor').onchange = () => {\n        let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n        circulargauge.axes[0].ranges[index].color = (<HTMLInputElement>document.getElementById('rangeColor')).value;\n        circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n    };\n\n    document.getElementById('enable').onchange = () => {\n        let useRangeColor: boolean = (<HTMLInputElement>document.getElementById('enable')).checked;\n        circulargauge.axes[0].labelStyle.useRangeColor = useRangeColor;\n        circulargauge.axes[0].majorTicks.useRangeColor = useRangeColor;\n        circulargauge.axes[0].minorTicks.useRangeColor = useRangeColor;\n        circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n    };\n\n    document.getElementById('rangeSelect').onchange = () => {\n        let index: number = +(<HTMLInputElement>document.getElementById('rangeSelect')).value;\n        (<HTMLInputElement>document.getElementById('rangeColor')).value = circulargauge.axes[0].ranges[index].color;\n        (<HTMLInputElement>document.getElementById('endWidth')).value = circulargauge.axes[0].ranges[index].endWidth.toString();\n        document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' +\n            circulargauge.axes[0].ranges[index].endWidth;\n        (<HTMLInputElement>document.getElementById('startWidth')).value = circulargauge.axes[0].ranges[index].startWidth.toString();\n        document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' +\n            circulargauge.axes[0].ranges[index].startWidth;\n        (<HTMLInputElement>document.getElementById('end')).value = circulargauge.axes[0].ranges[index].end.toString();\n        document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' +\n            circulargauge.axes[0].ranges[index].end;\n        (<HTMLInputElement>document.getElementById('start')).value = circulargauge.axes[0].ranges[index].start.toString();\n        document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' +\n            circulargauge.axes[0].ranges[index].start;\n    };\n\n","index.html":"<html><head>\n    <link href=\"http://npmci.syncfusion.com/production/demos/styles/material.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"range-container\"></div>\n        </div>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody><tr style=\"height: 50px\">\n                <td>\n                    <div> Select Range </div>\n                </td>\n                <td>\n                    <div>\n                        <select id=\"rangeSelect\" class=\"form-control\" style=\"width:90%\"> \n                                <option value=\"0\" selected=\"true\">Low</option>\n                                <option value=\"1\">Medium</option>\n                                <option value=\"2\">High</option>\n                            </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"rangeStart\">Range Start <span> &#xA0;&#xA0;&#xA0;0</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"start\" value=\"0\" min=\"0\" max=\"120\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"rangeEnd\">Range End <span> &#xA0;&#xA0;&#xA0;40</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"end\" value=\"40\" min=\"0\" max=\"120\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"\">Range Color</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"color\" id=\"rangeColor\" value=\"#30B32D\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 20%\">\n                    <div id=\"enablePointer\">Range Font Color</div>\n                </td>\n                <td style=\"width: 40%;\">\n                    <div>\n                        <input type=\"checkbox\" id=\"enable\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"rangeStartWidth\">Start Width <span> &#xA0;&#xA0;&#xA0;10</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"startWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td>\n                    <div id=\"rangeEndWidth\">End Width <span> &#xA0;&#xA0;&#xA0;10</span> </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" id=\"endWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}