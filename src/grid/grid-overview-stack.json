{"index.ts":"{{ripple}}﻿import { Grid, VirtualScroll, Sort, Filter, Selection } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, closest } from '@syncfusion/ej2-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\nGrid.Inject(Selection, VirtualScroll, Sort, Filter);\n\n/**\n * Grid Overview sample\n */\nlet dReady: boolean = false;\nlet dtTime: boolean = false;\nlet isDataBound: boolean = false;\nlet isDataChanged: boolean = true;\nlet intervalFun: any;\nlet clrIntervalFun: any;\nlet clrIntervalFun1: any;\nlet clrIntervalFun2: any;\nlet ddObj: DropDownList;\nlet dropSlectedIndex: number = null;\nlet stTime: any;\nstTime = performance.now();\n\n    let grid: Grid = new Grid({\n        dataSource: getTradeData(1000),\n        allowSelection: true,\n        allowFiltering: true,\n        allowSorting: true,\n        enableVirtualization: true,\n        filterSettings: { type: 'Menu' },\n        selectionSettings: { persistSelection: true, type: 'Multiple', checkboxOnly: true },\n        enableHover: false,\n        height: 600,\n        rowHeight: 38,\n        columns: [\n            { type: 'checkbox', allowFiltering: false, allowSorting: false, width: '60' },\n            { field: 'EmployeeID', visible: false, headerText: 'Employee ID', isPrimaryKey: true, width: '130' },\n            {\n                field: 'Employees', headerText: 'Employee Name', width: '200', clipMode: 'EllipsisWithTooltip',\n                template: '#empTemplate',\n                filter: { type: 'CheckBox' }\n            },\n            {\n                field: 'Designation', headerText: 'Designation', width: '170',\n                filter: { type: 'CheckBox' }, clipMode: 'EllipsisWithTooltip'\n            },\n            { field: 'Mail', headerText: 'Mail', width: '230', filter: { type: 'Menu' } },\n            {\n                field: 'Location', width: '140', headerText: 'Location', filter: { type: 'CheckBox' },\n                template: '#coltemplate'\n            },\n            {\n                field: 'Status', headerText: 'Status', filter: { type: 'CheckBox', itemTemplate: '#StatusItemTemp' },\n                width: '150', template: '#statusTemplate'\n            },\n            {\n                field: 'Trustworthiness', headerText: 'Trustworthiness', filter: { type: 'CheckBox', itemTemplate: '${ trustTemp(data)}' },\n                width: '160', template: '#trustTemplate'\n            },\n            {\n                field: 'Rating', filter: { type: 'CheckBox', itemTemplate: '<div>${ratingDetail(data)}</div>' }, headerText: 'Rating',\n                width: '160', template: '#ratingTemplate'\n            },\n            {\n                field: 'Software', allowFiltering: false, allowSorting: false, headerText: 'Software Proficiency',\n                width: '180', template: '#progessTemplate'\n            },\n            {\n                field: 'CurrentSalary', headerText: 'Current Salary', format: 'C2',\n                filter: { type: 'Menu' }, textAlign: 'Right', width: '160'\n            },\n            { field: 'Address', headerText: 'Address', width: '240', filter: { type: 'Menu' }, clipMode: 'EllipsisWithTooltip' },\n        ],\n        queryCellInfo: queryCellInfo,\n        dataBound: startTimer,\n        actionComplete: complete\n    });\n    grid.appendTo('#Grid');\n    grid.on('data-ready', () => {\n        dReady = true;\n    });\n    let listObj: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select a Data Range',\n        popupHeight: '240px',\n        width: '220px',\n        change: () => { valueChange(); }\n    });\n    listObj.appendTo('#ddl');\n    function valueChange(): void {\n        (<any>listObj).closePopup();\n        grid.showSpinner();\n        dropSlectedIndex = null;\n        let index: number = listObj.value as number;\n        clearTimeout(clrIntervalFun2);\n        clrIntervalFun2 = setTimeout(\n            () => {\n                isDataChanged = true;\n                stTime = null;\n                let contentElement: Element = grid.contentModule.getPanel().firstChild as Element;\n                contentElement.scrollLeft = 0;\n                contentElement.scrollTop = 0;\n                grid.pageSettings.currentPage = 1;\n                stTime = performance.now();\n                grid.dataSource = getTradeData(index);\n                grid.hideSpinner();\n            },\n            100);\n    }\n    document.getElementById('Grid').addEventListener('DOMSubtreeModified', () => {\n            if (dReady && stTime && isDataChanged) {\n                let msgEle: Element = document.getElementById('msg');\n                let val: any = (performance.now() - stTime).toFixed(0);\n                stTime = null;\n                dtTime = false;\n                dReady = false;\n                isDataChanged = false;\n                msgEle.innerHTML = 'Load Time: ' + '<b>' + val + '</b>' + '<b>ms</b>';\n                msgEle.classList.remove('e-hide');\n            }\n        });\n};\n\nfunction complete(args: any): void {\n    if (args.requestType === 'filterchoicerequest') {\n        if (args.filterModel.options.field === 'Trustworthiness' || args.filterModel.options.field === 'Rating'\n            || args.filterModel.options.field === 'Status') {\n            let span: Element = args.filterModel.dialogObj.element.querySelectorAll('.e-selectall')[0];\n            if (!isNullOrUndefined(span)) {\n                closest(span, '.e-ftrchk').classList.add('e-hide');\n            }\n        }\n    }\n}\nfunction queryCellInfo(args: any): void {\n    if (args.column.field === 'Employees') {\n        if (args.data.EmployeeImg === 'usermale') {\n            args.cell.querySelector('.e-userimg').classList.add('sf-icon-Male');\n        } else {\n            args.cell.querySelector('.e-userimg').classList.add('sf-icon-FeMale');\n        }\n    }\n    if (args.column.field === 'Status') {\n        if (args.cell.textContent === 'Active') {\n            args.cell.querySelector('.statustxt').classList.add('e-activecolor');\n            args.cell.querySelector('.statustemp').classList.add('e-activecolor');\n        }\n        if (args.cell.textContent === 'InActive') {\n            args.cell.querySelector('.statustxt').classList.add('e-inactivecolor');\n            args.cell.querySelector('.statustemp').classList.add('e-inactivecolor');\n        }\n    }\n    if (args.column.field === 'Rating') {\n        if (args.column.field === 'Rating') {\n            for (let i: number = 0; i < args.data.Rating; i++) {\n                args.cell.querySelectorAll('span')[i].classList.add('checked');\n            }\n        }\n    }\n    if (args.column.field === 'Software') {\n        if (args.data.Software <= 20) {\n            args.data.Software = args.data.Software + 30;\n        }\n        args.cell.querySelector('.bar').style.width = args.data.Software + '%';\n        args.cell.querySelector('.barlabel').textContent = args.data.Software + '%';\n        if (args.data.Status === 'InActive') {\n            args.cell.querySelector('.bar').classList.add('progressdisable');\n        }\n    }\n}\nfunction startTimer(args: any): void {\n    clearTimeout(clrIntervalFun);\n    clearInterval(intervalFun);\n    dtTime = true;\n}\n\nfunction getTradeData(dataCount?: number): object {\n    let employees: string[] = [\n        'Michael', 'Kathryn', 'Tamer', 'Martin', 'Davolio', 'Nancy', 'Fuller', 'Leverling', 'Peacock',\n        'Margaret', 'Buchanan', 'Janet', 'Andrew', 'Callahan', 'Laura', 'Dodsworth', 'Anne',\n        'Bergs', 'Vinet', 'Anton', 'Fleet', 'Zachery', 'Van', 'King', 'Jack', 'Rose'];\n    let designation: string[] = ['Manager', 'CFO', 'Designer', 'Developer', 'Program Directory', 'System Analyst', 'Project Lead'];\n    let mail: string[] = ['sample.com', 'arpy.com', 'rpy.com', 'mail.com', 'jourrapide.com'];\n    let location: string[] = ['UK', 'USA', 'Sweden', 'France', 'Canada', 'Argentina', 'Austria', 'Germany', 'Mexico'];\n    let status: string[] = ['Active', 'InActive'];\n    let trustworthiness: string[] = ['Perfect', 'Sufficient', 'InSufficient'];\n    let tradeData: Object[] = [];\n    let address: string[] = ['59 rue de lAbbaye', 'Luisenstr. 48', 'Rua do Paço, 67', '2, rue du Commerce', 'Boulevard Tirou, 255',\n        'Rua do mailPaço, 67', 'Hauptstr. 31', 'Starenweg 5', 'Rua do Mercado, 12',\n        'Carrera 22 con Ave. Carlos Soublette #8-35', 'Kirchgasse 6',\n        'Sierras de Granada 9993', 'Mehrheimerstr. 369', 'Rua da Panificadora, 12', '2817 Milton Dr.', 'Kirchgasse 6',\n        'Åkergatan 24', '24, place Kléber', 'Torikatu 38', 'Berliner Platz 43', '5ª Ave. Los Palos Grandes', '1029 - 12th Ave. S.',\n        'Torikatu 38', 'P.O. Box 555', '2817 Milton Dr.', 'Taucherstraße 10', '59 rue de lAbbaye', 'Via Ludovico il Moro 22',\n        'Avda. Azteca 123', 'Heerstr. 22', 'Berguvsvägen  8', 'Magazinweg 7', 'Berguvsvägen  8', 'Gran Vía, 1', 'Gran Vía, 1',\n        'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Magazinweg 7', 'Taucherstraße 10', 'Taucherstraße 10',\n        'Av. Copacabana, 267', 'Strada Provinciale 124', 'Fauntleroy Circus', 'Av. dos Lusíadas, 23',\n        'Rua da Panificadora, 12', 'Av. Inês de Castro, 414', 'Avda. Azteca 123', '2817 Milton Dr.'];\n    let employeeimg: string[] = ['usermale', 'userfemale'];\n    if (typeof dataCount === 'string') {\n        dataCount = parseInt(dataCount, 10);\n    }\n    for (let i: number = 1; i <= dataCount; i++) {\n        let code: any = 10000;\n        tradeData.push({\n            'EmployeeID': code + i,\n            'Employees':\n            employees[Math.floor(Math.random() * employees.length)] + ' ' + employees[Math.floor(Math.random() * employees.length)],\n            'Designation': designation[Math.floor(Math.random() * designation.length)],\n            'Location': location[Math.floor(Math.random() * location.length)],\n            'Status': status[Math.floor(Math.random() * status.length)],\n            'Trustworthiness': trustworthiness[Math.floor(Math.random() * trustworthiness.length)],\n            'Rating': Math.floor(Math.random() * 5),\n            'Software': Math.floor(Math.random() * 100),\n            'EmployeeImg': employeeimg[Math.floor(Math.random() * employeeimg.length)],\n            'CurrentSalary': Math.floor((Math.random() * 100000)),\n            'Address': address[Math.floor(Math.random() * address.length)],\n        });\n        let employee: string = 'Employees';\n        let emp: string = tradeData[i - 1][employee];\n        let sName: string = emp.substr(0, emp.indexOf(' ')).toLowerCase();\n        let empmail: string = 'Mail';\n        tradeData[i - 1][empmail] = sName + (Math.floor(Math.random() * 100) + 10) + '@' + mail[Math.floor(Math.random() * mail.length)];\n\n    }\n    return tradeData;\n}\n\n(<{trustTemp?: Function}>window).trustTemp = (e: any): any => {\n    if (e.Trustworthiness === 'Select All') {\n        return '';\n    }\n    /* tslint:disable-next-line:max-line-length */\n    return '<img style=\"width: 31px; height: 24px\" src=\"//npmci.syncfusion.com/production/demos/src/grid/images/' + e.Trustworthiness + '.png\" /> <span id=\"Trusttext\">' + e.Trustworthiness + '</span>';\n};\n\n(<{ratingDetail?: Function}>window).ratingDetail = (e: any): any => {\n    let grid: any = (<any>document.querySelector('.e-grid')).ej2_instances[0];\n    let div: Element = document.createElement('div');\n    div.className = 'rating';\n    let span: Element;\n    if (e.Rating === 'Select All') {\n        return '';\n    }\n    for (let i: number = 0; i < 5; i++) {\n        if (i < e.Rating) {\n            span = document.createElement('span');\n            span.className = 'star checked';\n            div.appendChild(span);\n        } else {\n            span = document.createElement('span');\n            span.className = 'star';\n            div.appendChild(span);\n        }\n    }\n    return div.outerHTML;\n};\n\n(<{statusDetail?: Function}>window).statusDetail = (e: any): any => {\n    let grid: any = (<any>document.querySelector('.e-grid')).ej2_instances[0];\n    let div: Element = document.createElement('div');\n    let span: Element;\n    if (e.Status === 'Select All') {\n        return 'Select All';\n    }\n    span = document.createElement('span');\n    if (e.Status === 'Active') {\n        span.className = 'statustxt e-activecolor';\n        span.textContent = 'Active';\n        div.className = 'statustemp e-activecolor';\n    }\n    if (e.Status === 'InActive') {\n        span = document.createElement('span');\n        span.className = 'statustxt e-inactivecolor';\n        span.textContent = 'InActive';\n        div.className = 'statustemp e-inactivecolor';\n    }\n    div.appendChild(span);\n    return div.outerHTML;\n\n\n","index.html":"<html><head><link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"../node_modules/@syncfusion/ej2/{{theme}}.css\" rel=\"stylesheet\"><style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<link href=\"src/grid/images/Grid/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <div>\n            <select id=\"ddl\">\n                     <option value=\"1000\">1,000 Rows and 11 Columns</option>\n                     <option value=\"10000\">10,000 Rows and 11 Columns</option>\n                     <option value=\"100000\">1,00,000 Rows and 11 Columns</option>\n            </select>\n            <span id=\"msg\"></span>\n            <br>\n        </div>\n        <div id=\"Grid\">\n        </div>\n    </div>\n</div>\n<style>\n    .fabric .empimg{\n        background-color:#0078d6; \n    }\n    .material .empimg{\n        background-color:#e3165b; \n    }\n    .highcontrast .empimg{\n        background-color:#ffd939; \n    }\n    _:-ms-fullscreen, :root .highcontrast .e-userimg.sf-icon-Male::before,\n    _:-ms-fullscreen, :root .highcontrast .e-userimg.sf-icon-FeMale::before{\n        color: black;\n    }\n    .highcontrast .e-userimg.sf-icon-Male::before,\n    .highcontrast .e-userimg.sf-icon-FeMale::before{       \n        color: black;\n    }\n    .bootstrap .empimg{\n        background-color:#0078d6; \n    }\n\n    #Emptext{\n    top: -12px;\n    left: 41px;\n    position: relative;\n    }\n    .empimg{\n    height: 27px;\n    width: 29px;\n    border-radius: 14px;\n    }\n   \n.e-grid.e-rtl #Emptext{\n    top: -12px;\n    left: -41px;\n    position: relative;\n}\n    .e-userimg.sf-icon-Male::before,\n    .e-userimg.sf-icon-FeMale::before{\n        font-size: 13px;\n    }\n    .e-userimg.sf-icon-Male, .e-userimg.sf-icon-FeMale {  \n        margin: 0px 8px;\n        line-height: 26px;\n        color: white; \n        font-size: 13px;\n    }\n\n    .e-userimg.sf-icon-Male::before{\n        content: '\\e700';      \n    }\n    .e-userimg.sf-icon-FeMale::before{\n        content: '\\e701';      \n    }\n\n    .highcontrast .e-grid td.e-rowcell.e-selectionbackground.e-active {\n        background-color: transparent;\n        color: white;\n    }\n\n    .e-bigger .e-grid .statustxt {\n        position: relative;\n        top: -2px;\n    }\n\n    .rating .star {\n        font-size: 132%;\n        color: lightgrey;\n    }\n\n    .rating .star.checked {\n        color: #ffa600;\n    }\n\n    .rating .star:before {\n        content: '★';\n    }\n\n    td.e-rowcell.e-selectionbackground.e-active {\n        background-color: transparent;\n    }\n\n    .e-image {\n        height: 13px;\n        width: 14px;\n    }\n\n    td.e-rowcell .statustxt.e-activecolor {\n        color: #00cc00;\n        position: relative;\n        top: 9px;\n    }\n\n    td.e-rowcell .statustxt.e-inactivecolor {\n        color: #e60000;\n        position: relative;\n        top: 9px;\n    }\n\n    .statustemp.e-inactivecolor {\n        background-color: #ffd7cc;\n        width: 64px;\n    }\n\n    .statustemp.e-activecolor {\n        background-color: #ccffcc;\n        width: 57px;\n    }\n\n    .statustxt.e-activecolor {\n        color: #00cc00;\n    }\n\n    .statustxt.e-inactivecolor {\n        color: #e60000;\n    }\n\n    .statustemp {\n        position: relative;\n        height: 19px;\n        border-radius: 5px;\n        text-align: center\n    }\n\n    .highcontrast #msg {\n        color: #FFFFFF\n    }\n\n    #msg {\n        font-family: \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", sans-serif;\n        font-size: 14px;\n        font-weight: 400;\n        opacity: 0.95;\n        color: #333;\n        float: right;\n        margin-top: 3px;\n    }\n\n    @media only screen and (max-width: 370px) {\n        #msg {\n            float: left;\n            margin-top: 3px;\n        }\n        #Grid {\n            margin-top: 36px;\n        }\n    }\n\n    #samplecontainer {\n        padding-top: 5px;\n    }\n\n    #myProgress {\n        position: relative;\n        height: 18px;\n        width: 10em;\n        text-align: left;\n        background-color: white;\n    }\n\n    .highcontrast .e-grid #myProgress {\n        background-color: black;\n    }\n\n    #myBar {\n        position: absolute;\n        width: 10%;\n        height: 100%;\n        background-color: #00b300;\n    }\n\n    #myBar.progressdisable {\n        background-color: #df2222;\n    }\n\n    #label {\n        position: relative;\n        left: 10px;\n        line-height: 18px;\n        font-size: 10px;\n        color: white;\n    }\n</style>\n\n<script type=\"text/x-jsrender\" id=\"progessTemplate\">\n    <div id=\"myProgress\" class=\"pbar\">\n        <div id=\"myBar\" class=\"bar\">\n            <div id=\"label\" class=\"barlabel\"></div>\n        </div>\n    </div>\n</script>\n\n<script type=\"text/x-jsrender\" id=\"ratingTemplate\">\n    <div class=\"rating\">\n        <span class=\"star\"></span>\n        <span class=\"star\"></span>\n        <span class=\"star\"></span>\n        <span class=\"star\"></span>\n        <span class=\"star\"></span>\n    </div>\n\n</script>\n\n<script type=\"text/x-jsrender\" id=\"empTemplate\">\n    <div>\n            <div class=\"empimg\">\n              <span class=\"e-userimg\">\n              </span>\n            </div> \n            <span id=\"Emptext\">${Employees}</span>\n          </div>\n</script>\n\n<script type=\"text/x-jsrender\" id=\"trustTemplate\">\n    <img style=\"width: 31px; height: 24px\" src=\"//npmci.syncfusion.com/production/demos/src/grid/images/${Trustworthiness}.png\" />\n    <span id=\"Trusttext\">${Trustworthiness}</span>\n</script>\n\n<script type=\"text/x-jsrender\" id=\"statusTemplate\">\n    <div id=\"status\" class=\"statustemp\">\n        <span class=\"statustxt\">${Status}</span>\n    </div>\n</script>\n\n<script type=\"text/x-jsrender\" id=\"StatusItemTemp\">\n    ${statusDetail(data)}\n</script>\n\n<script id=\"coltemplate\" type=\"text/x-template\">\n    <div class=\"image\">\n        <img src=\"//npmci.syncfusion.com/production/demos/src/grid/images/Map.png\" class=\"e-image\" alt=\"${Location}\" /> &nbsp\n        <span id=\"locationtext\">${Location}</span>\n    </div>\n</script>\n\n\n\n</div></body></html>"}