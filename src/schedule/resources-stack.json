{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <div class=\"content-wrapper\">\n        <div class=\"schedule-demo-heading\">\n            Cheapest one way fares from Barcelona to Los Angeles\n        </div>\n        <div id=\"Schedule\">\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<script id=\"event-template\" type=\"text/x-template\">\n    <div class='template-wrap'>\n        <div class='fare-detail'>$${Fare}</div>\n        <div class='airline-name' style='display:flex;padding-left:5px;'>\n            <div class=\"airline-logo ${getAirwaysImage(data.AirlineId)}\"></div>\n            <div class='airway-name'>${getAirwaysName(data.AirlineId)}</div>\n        </div>\n    </div>\n</script>\n\n<script id=\"tooltip-template\" type=\"text/x-template\">\n    <div class='event-tooltip'>\n        <div class='airline-header'>\n            <div class='airline-logo ${getAirwaysImage(data.AirlineId)}'></div>\n            <div class='airline-name'>${getAirwaysName(data.AirlineId)}</div>\n        </div>\n        <div class='airline-details text-size'>\n            <div class='airline-title'>Fare Details:</div>\n            <div class='airline-fare'>$${Fare} per person</div>\n        </div>\n        <div class='airline-flex-row text-size'>\n            <div class='airline-flex-col airline-title border-right'>Arrival</div>\n            <div class='airline-flex-col airline-title text-right'>Depature</div>\n        </div>\n        <div class='airline-flex-row text-size'>\n            <div class='airline-flex-col border-right'>${getFormattedTime(data.StartTime)}</div>\n            <div class='airline-flex-col margin-right text-right'>${getFormattedTime(data.EndTime)}</div>\n        </div>\n    </div>\n</script>\n\n\n</div></body></html>","index.ts":"{{ripple}}\r\nimport { extend, Internationalization, createElement, closest, remove, addClass, removeClass } from '@syncfusion/ej2-base';\r\nimport { CheckBox, ChangeEventArgs } from '@syncfusion/ej2-buttons';\r\nimport {\r\n    Schedule, Month, EventFieldsMapping, ActionEventArgs, ToolbarActionArgs, PopupOpenEventArgs\r\n} from '@syncfusion/ej2-schedule';\r\n\r\n/**\r\n * schedule resources group sample\r\n */\r\nSchedule.Inject(Month);\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\n\r\n    \r\n\r\n    let dManager: Object[] = [];\r\n    let initialLoad: Boolean = true;\r\n    let scheduleObj: Schedule = new Schedule({\r\n        width: '100%',\r\n        height: '650px',\r\n        views: ['Month'],\r\n        readonly: true,\r\n        selectedDate: new Date(2018, 3, 1),\r\n        resources: [{\r\n            field: 'AirlineId',\r\n            title: 'Airline',\r\n            name: 'Airlines',\r\n            allowMultiple: true,\r\n            dataSource: [\r\n                { text: 'Airways 1', id: 1 },\r\n                { text: 'Airways 2', id: 2 },\r\n                { text: 'Airways 3', id: 3 }\r\n            ],\r\n            textField: 'text', idField: 'id'\r\n        }],\r\n        eventSettings: {\r\n            template: '#event-template',\r\n            enableTooltip: true,\r\n            tooltipTemplate: '#tooltip-template'\r\n        },\r\n        actionBegin: (args: ActionEventArgs & ToolbarActionArgs) => {\r\n            if (args.requestType === 'toolbarItemRendering') {\r\n                args.items[2].align = 'Center';\r\n                args.items[2].suffixIcon = '';\r\n                args.items = args.items.splice(2, 1);\r\n            }\r\n        },\r\n        dataBinding: () => {\r\n            if (initialLoad) {\r\n                scheduleObj.eventSettings.dataSource = generateEvents(scheduleObj);\r\n                initialLoad = false;\r\n            }\r\n        },\r\n        dataBound: () => {\r\n            let eventCollections: Object[] = scheduleObj.getCurrentViewEvents();\r\n            eventCollections.sort((a: { [key: string]: Object }, b: { [key: string]: Object }) =>\r\n                ((<number>a.Fare) - (<number>b.Fare)));\r\n            let indexDate: Date = new Date((<Date>(<{ [key: string]: Object }>eventCollections[0]).StartTime).getTime());\r\n            indexDate.setHours(0, 0, 0, 0);\r\n            let index: number = scheduleObj.getIndexOfDate(scheduleObj.activeView.renderDates, indexDate);\r\n            let target: HTMLElement = scheduleObj.element.querySelectorAll('.e-work-cells')[index] as HTMLElement;\r\n            addClass([target], 'best-price');\r\n            target.appendChild(createElement('div', { className: 'best-price', innerHTML: 'Best Price' }));\r\n        },\r\n        popupOpen: (args: PopupOpenEventArgs) => {\r\n            args.cancel = true;\r\n        }\r\n    });\r\n    scheduleObj.appendTo('#Schedule');\r\n\r\n\r\n"}