{"index.ts":"import { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * ComboBox Cascading Sample\n */\nimport { ComboBox } from '@syncfusion/ej2-dropdowns';\nimport { Query } from '@syncfusion/ej2-data';\n\n\n    let country: { [key: string]: Object }[] = [\n        { CountryName: 'Australia', CountryId: '2' }, { CountryName: 'United States', CountryId: '1' }];\n    let state: { [key: string]: Object }[] = [\n        { StateName: 'New York', CountryId: '1', StateId: '101' }, { StateName: 'Queensland', CountryId: '2', StateId: '104' },\n        { StateName: 'Tasmania ', CountryId: '2', StateId: '105' }, { StateName: 'Victoria', CountryId: '2', StateId: '106' },\n        { StateName: 'Virginia ', CountryId: '1', StateId: '102' }, { StateName: 'Washington', CountryId: '1', StateId: '103' }];\n    let cities: { [key: string]: Object }[] = [\n        { CityName: 'Aberdeen', StateId: '103', CityId: 207 }, { CityName: 'Alexandria', StateId: '102', CityId: 204 },\n        { CityName: 'Albany', StateId: '101', CityId: 201 },  { CityName: 'Beacon ', StateId: '101', CityId: 202 },\n        { CityName: 'Brisbane ', StateId: '104', CityId: 211 }, { CityName: 'Cairns', StateId: '104', CityId: 212 },\n        { CityName: 'Colville ', StateId: '103', CityId: 208 }, { CityName: 'Devonport', StateId: '105', CityId: 215 },\n        { CityName: 'Emporia', StateId: '102', CityId: 206 }, { CityName: 'Geelong', StateId: '106', CityId: 218 },\n        { CityName: 'Hampton ', StateId: '102', CityId: 205 }, { CityName: 'Healesville ', StateId: '106', CityId: 217 },\n        { CityName: 'Hobart', StateId: '105', CityId: 213 }, { CityName: 'Launceston ', StateId: '105', CityId: 214 },\n        { CityName: 'Lockport', StateId: '101', CityId: 203 }, { CityName: 'Melbourne', StateId: '106', CityId: 216 },\n        { CityName: 'Pasco', StateId: '103', CityId: 209 }, { CityName: 'Townsville', StateId: '104', CityId: 210 }];\n\n    let countryList: ComboBox = new ComboBox({\n        // set the country data to dataSource property\n        dataSource: country,\n        // set the height of the popup element\n        popupHeight: 'auto',\n        // map the appropriate columns to fields property\n        fields: { value: 'CountryId', text: 'CountryName' },\n        // set false for disable the behavior of custom value rendering\n        allowCustom: false,\n        // bind change event\n        change: () => {\n            if (countryList.value === null) {\n                stateList.enabled = false;\n                cityList.enabled = false;\n                stateList.value = null;\n                cityList.value = null;\n            } else {\n                stateList.enabled = true;\n                // frame the query based on selected value in country ComboBox.\n                let tempQuery: Query = new Query().where('CountryId', 'equal', countryList.value);\n                stateList.query = tempQuery;\n                stateList.value = null;\n                cityList.value = null;\n                cityList.enabled = false;\n            }\n            stateList.dataBind();\n            cityList.dataBind();\n        },\n        // set the placeholder to ComboBox input element\n        placeholder: 'Select a country'\n    });\n    countryList.appendTo('#country');\n\n    let stateList: ComboBox = new ComboBox({\n        // set the state data to dataSource property\n        dataSource: state,\n        // set the height of the popup element\n        popupHeight: 'auto',\n        // map the appropriate columns to fields property\n        fields: { value: 'StateId', text: 'StateName' },\n        // set disable state by default to prevent user interact.\n        enabled: false,\n        // set false for disable the behavior of custom value rendering\n        allowCustom: false,\n        // bind change event\n        change: () => {\n            if (stateList.value === null) {\n                cityList.enabled = false;\n                cityList.value = null;\n            } else {\n                cityList.enabled = true;\n                // frame the query based on selected value in state ComboBox.\n                let tempQuery: Query = new Query().where('StateId', 'equal', stateList.value);\n                // set the framed query based on selected value in state ComboBox.\n                cityList.query = tempQuery;\n                cityList.value = null;\n            }\n            cityList.dataBind();\n        },\n        // set the placeholder to ComboBox input element\n        placeholder: 'Select a state'\n    });\n    stateList.appendTo('#state');\n\n    let cityList: ComboBox = new ComboBox({\n        // set the city data to dataSource property\n        dataSource: cities,\n        // set the height of the popup element\n        popupHeight: 'auto',\n        // map the appropriate columns to fields property\n        fields: { text: 'CityName', value: 'CityId' },\n        // set disable state by default to prevent user interact.\n        enabled: false,\n        // set false for disable the behavior of custom value rendering\n        allowCustom: false,\n        // set the placeholder to ComboBox input element\n        placeholder: 'Select a city'\n    });\n    cityList.appendTo('#city');\n","index.html":"<!DOCTYPE html><html><head>\n    <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\">\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n    <script src=\"systemjs.config.js\"></script>\n</head>\n<body>\n<div class=\"col-lg-12 control-section\">\n    <div class=\"control-wrapper\">\n        <div class=\"padding-top\">\n            <input type=\"text\" id=\"country\">\n        </div>\n        <div class=\"padding-top\">\n            <input type=\"text\" id=\"state\">\n        </div>\n        <div class=\"padding-top\">\n            <input type=\"text\" id=\"city\">\n        </div>\n    </div>\n</div>\n\n\n\n\n<style>\n    .control-wrapper {\n        margin: 0 auto;\n        width: 250px;\n    }\n\n    .control-section .padding-top {\n        padding-top: 35px\n    }\n</style>\n\n</body></html>","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\"\n    },\n    map: {\n        main: \"index.ts\",\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        'plugin-json':'https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js',\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",        \n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",        \n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",        \n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\"\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\nSystem.import('index.ts').catch(console.error.bind(console));"}